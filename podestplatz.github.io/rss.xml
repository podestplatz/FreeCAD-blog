<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>FreeCAD Development Blog</title><link>https://podestplatz.github.io/FreeCAD-blog</link><description>Announcements and community progress news in FreeCAD development.</description><atom:link href="https://podestplatz.github.io/FreeCAD-blog/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2019 &lt;a href="mailto:info@freecadweb.org"&gt;FreeCAD Community&lt;/a&gt; </copyright><lastBuildDate>Mon, 27 May 2019 17:03:11 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Dev Logs</title><link>https://podestplatz.github.io/FreeCAD-blog/posts/dev-logs/</link><dc:creator>FreeCAD Community</dc:creator><description>&lt;div&gt;&lt;p&gt;This is a daily updated log of the work I do on the &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/"&gt;BCF-plugin&lt;/a&gt; for FreeCAD&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;May 27th:&lt;/strong&gt; Complete the python representation of the class diagram &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/0a1081bb1fe26dc729d3a2b708fde491b3a31505"&gt;commit
0a1081b&lt;/a&gt;. Also advanced to the point where a &lt;cite&gt;.bcf&lt;/cite&gt; can be opened, every XML
file be validated (in theory, only tested it with project.bcfp yet) and the
contents of &lt;cite&gt;project.bcfp&lt;/cite&gt; are can be written to an object of &lt;cite&gt;Project&lt;/cite&gt;. For
more details refer to following commits:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/bae270f1127039ae78876bf6f3785c48ec0e30b9"&gt;commit bae270f&lt;/a&gt;: Add util.py and reader.py&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/3c0b9d0a1beed02816cd15b0a5186368d7361f7d"&gt;commit 3c0b9d0&lt;/a&gt;: util.py: add schemaValidate&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/f62ed23a73e209fc69995fccedf4e20beddf7632"&gt;commit f62ed23&lt;/a&gt;: reader.py: add buildProject&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;May 26th:&lt;/strong&gt; Update Comment in class diagram. For more info see &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/1c34ad907b7fc56cd96aa2fc5aa133e3f445a24b"&gt;commit 1c34ad9&lt;/a&gt;, and create &lt;a class="reference external" href="https://forum.freecadweb.org/viewtopic.php?p=310515#p310515"&gt;mockup of the plugin interface&lt;/a&gt;.
Write part one of the class model in python see &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/31ef931b3637c90ca0c8252f71dd635e66a843fa"&gt;commit 31ef931&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>daily</category><guid>https://podestplatz.github.io/FreeCAD-blog/posts/dev-logs/</guid><pubDate>Sat, 25 May 2019 07:15:45 GMT</pubDate></item><item><title>Learning XSD Syntax</title><link>https://podestplatz.github.io/FreeCAD-blog/posts/learning-xsd-syntax/</link><dc:creator>FreeCAD Community</dc:creator><description>&lt;div&gt;&lt;p&gt;The main takeaway from the XML Schema Definition Tutorial I went through today
was the following:&lt;/p&gt;
&lt;blockquote&gt;
So the node &lt;cite&gt;&amp;lt;xs:sequence&amp;gt;...&amp;lt;/xs:sequence&amp;gt;&lt;/cite&gt; is part of the definition of a
complex type, it is also called an indicator. What it does is that it tells the
XML checker that the elements specified inside have to occur in the same order
in the XML document to be valid. Also it specifies what elements may be
contained in the complex node.&lt;/blockquote&gt;
&lt;p&gt;This greatly improved my understanding of &lt;cite&gt;visinfo.xsd&lt;/cite&gt; which describes how a
&lt;cite&gt;viewpoint.bcfv&lt;/cite&gt; file is built. As I learned during design, the representation
of a viewpoint is almost as complex as the representation of the remaining
contents of a BCF file.&lt;/p&gt;
&lt;p&gt;I thought about how I coudl read the contents of a BCF into this file structure.
As my brain always does, it thinks through the whole process, from checking if
the given file is valid till the point where all the data resides in an object
in memory. This makes me prone to "reinventing the wheel" as I also design a XSD
parser/checker in my head which I then would use to check the given files before
reading them in. But a quick google search brought up a better option, namely an
offical &lt;a class="reference external" href="https://pypi.org/project/xmlschema/"&gt;python library&lt;/a&gt; for checking XML files against a schema.&lt;/p&gt;
&lt;p&gt;Last but not least: I am pleased to announce that the first draft of the class
diagram is ready. You can find it &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/tree/master/doc"&gt;here&lt;/a&gt; if you are interested.&lt;/p&gt;&lt;/div&gt;</description><category>bcf</category><category>bim</category><category>class-diagram</category><category>GSoC</category><guid>https://podestplatz.github.io/FreeCAD-blog/posts/learning-xsd-syntax/</guid><pubDate>Wed, 15 May 2019 04:24:35 GMT</pubDate></item><item><title>Advancing to the Viewpoint.bcf part</title><link>https://podestplatz.github.io/FreeCAD-blog/posts/finishing-up-the-datamodel-uml/</link><dc:creator>FreeCAD Community</dc:creator><description>&lt;div&gt;&lt;p&gt;In the &lt;a class="reference external" href="https://forum.freecadweb.org/viewtopic.php?p=308095#p308095"&gt;forum post&lt;/a&gt; yesterday, Yorik pointed out that, although part of the
specification, the BimSnippet does not have to be treated with high priority. He
also referred me to Bernd and Duncan in case of questions arising.
As advised, I will consider the BimSnippet in the data model but probably won't
implement it right away.&lt;/p&gt;
&lt;p&gt;The progress I made today was mostly in understanding the BCF specification in
regards to the viewpoint.bcfv file. Multiple viewpoint files can be contained
within the folder of one topic. At the beginning of the day I thought that the
data model would be finished rather quick but as it turned out the documentation
on it is not as concise as one might wish it to be. To be more precise: the
whole section about the "Components" element is a bit confusing. It lists
multiple "properties", like &lt;cite&gt;Selection&lt;/cite&gt; and &lt;cite&gt;Visibility&lt;/cite&gt;. My intuition says that
&lt;cite&gt;Selection&lt;/cite&gt; contains a list of components that are selected, and &lt;cite&gt;Visibility&lt;/cite&gt;
specifies whether these components shall be visible or not. But in reality each
contains a list of components onto which the values of the attributes of the
respective property shall be applied.&lt;/p&gt;
&lt;p&gt;This is a bit confusing at first, and still is for me. Because of this ambiguity
I decided, for the further data model design, that refer to the related XML
schemas rather than the written documentation. For example here you can find the
schema for the &lt;a class="reference external" href="https://github.com/buildingSMART/BCF-XML/blob/master/Schemas/visinfo.xsd"&gt;viewpoint.bcf&lt;/a&gt; file.&lt;/p&gt;
&lt;p&gt;But since the last time I have worked with XML schemas was in vocational school
(I think 2012) I have to refresh my memory on it. For that I will go through the
relevant parts of the &lt;a class="reference external" href="https://www.w3schools.com/xml/schema_intro.asp"&gt;W3CSchools: XML Schema Tutorial&lt;/a&gt;. Tomorrow.&lt;/p&gt;&lt;/div&gt;</description><category>bcf</category><category>bim</category><category>class-diagram</category><category>GSoC</category><guid>https://podestplatz.github.io/FreeCAD-blog/posts/finishing-up-the-datamodel-uml/</guid><pubDate>Tue, 14 May 2019 03:42:30 GMT</pubDate></item><item><title>Representing markup.bcf in UML</title><link>https://podestplatz.github.io/FreeCAD-blog/posts/representing-markupbcf-in-uml/</link><dc:creator>FreeCAD Community</dc:creator><description>&lt;div&gt;&lt;p&gt;Today I mostly finished the UML class diagram in regard to representing the data
of the &lt;tt class="docutils literal"&gt;markup.bcf&lt;/tt&gt; file. One think I found kind of interesing while creating
the diagram is that in the &lt;a class="reference external" href="https://github.com/BuildingSMART/BCF-XML/tree/master/Documentation"&gt;BCF-XML-Documentation&lt;/a&gt; There is no link between a
topic and a comment, so no id of one is stored in the other. That didn't make
sense at first because I thought that one &lt;tt class="docutils literal"&gt;markup&lt;/tt&gt; could have multiple topics,
which is &lt;strong&gt;not&lt;/strong&gt; the case.&lt;/p&gt;
&lt;p&gt;However one think what is not that obvious to me is the case with the &lt;tt class="docutils literal"&gt;BIMSnippet&lt;/tt&gt;.
On the documentation page it says that: "BimSnippet is an additional file containing
information related to one or multiple topics.". This would imply that there
would be more topics inside one &lt;tt class="docutils literal"&gt;markup.bcf&lt;/tt&gt; file, because &lt;tt class="docutils literal"&gt;BimSnippet&lt;/tt&gt; is,
as I understand, also just a node inside &lt;tt class="docutils literal"&gt;markup.bcf&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Regarding the open question from the previous post: How to represent constraints
defined in &lt;tt class="docutils literal"&gt;extensions.xsd&lt;/tt&gt;; I thought about it a little today and came to the
conclusion that it would be the best approach to go with the last option I
listed. That means that for every node, for which constraints are listed in
&lt;tt class="docutils literal"&gt;extensions.xsd&lt;/tt&gt;, an empty enumeration/class is created which then, during
runtime, gets populated with the valid values.&lt;/p&gt;
&lt;p&gt;UPDATE (2019-05-13): The inconsistency is resolved. The BimSnippet node just references one
file that does not have to be inside the topic folder.&lt;/p&gt;&lt;/div&gt;</description><category>bcf</category><category>bim</category><category>class-diagram</category><category>GSoC</category><guid>https://podestplatz.github.io/FreeCAD-blog/posts/representing-markupbcf-in-uml/</guid><pubDate>Mon, 13 May 2019 17:43:03 GMT</pubDate></item><item><title>How to represent extension.xsd constraints</title><link>https://podestplatz.github.io/FreeCAD-blog/posts/how-to-represent-extensionxsd-constraints/</link><dc:creator>FreeCAD Community</dc:creator><description>&lt;div&gt;&lt;p&gt;So by now this &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD"&gt;repository&lt;/a&gt; exists, which already houses two example BCF files in
&lt;tt class="docutils literal"&gt;examples/&lt;/tt&gt;,
supplied by &lt;a class="reference external" href="https://forum.freecadweb.org/memberlist.php?mode=viewprofile&amp;amp;u=68"&gt;yorik&lt;/a&gt;. This repository is intended to be the main development repository.
I started a little UML class diagram, which you can find in
the folder &lt;tt class="docutils literal"&gt;doc/&lt;/tt&gt; in the root directory of the repository.&lt;/p&gt;
&lt;p&gt;Note however, the class "Template" is just used for copy and paste. I used it to
set the font to Sourcecode Pro, which was kind of tedious, and since I didn't
know if these font changes translate to newly created classes too I have gone
with the copy&amp;amp;paste approach. The classes presented in this diagram are all for
representing the data from the markup.bcf file (except for the class "Project").
For the creation of these class diagrams I use &lt;a class="reference external" href="http://dia-installer.de/download/linux.html.de"&gt;Dia&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The current problem I am facing is: how to represent the constraints given in
the &lt;tt class="docutils literal"&gt;extension.xsd&lt;/tt&gt; file (a link to it &lt;a class="reference external" href="https://github.com/buildingSMART/BCF-XML/tree/master/Extension%20Schemas"&gt;here&lt;/a&gt;). The most constraints listed in
this file are just listings of valid values for some nodes or attributes. What I
want to do is to force the user of this classes to use one of the valid values
and not have to implement extra code that checks each time the value is set or
written to a file for that matter.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So what possibilities do I have to choose from?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Probably most intuitively would be to create one enumeration class (&lt;a class="reference external" href="https://docs.python.org/3/library/enum.html"&gt;python
reference&lt;/a&gt;) for each attibute or node listed in &lt;tt class="docutils literal"&gt;extensions.xsd&lt;/tt&gt;. The main
disadvantage her ist that these enumerations have to be maintained by hand, in
the case of a change to &lt;tt class="docutils literal"&gt;extensions.xsd&lt;/tt&gt;. That makes this first intuitive
option quite unattractive.&lt;/p&gt;
&lt;p&gt;The second option that comes to mind would be to parse &lt;tt class="docutils literal"&gt;extensions.xsd&lt;/tt&gt; and
then programmatically define the enumerations. This is possible due to the
dynamically typed nature of python. However this also implies that the classes,
containing a representation of an affected attribute or node, also have to be
modified every time the plugin starts and &lt;tt class="docutils literal"&gt;extensions.xsd&lt;/tt&gt; is parsed. This is
because the classes, of which type the class variables are, do not exist before
runtime.&lt;/p&gt;
&lt;p&gt;A third approach would also be possible where one enumeration class is written,
before runtime, with no values. Then during startup &lt;tt class="docutils literal"&gt;extensions.xsd&lt;/tt&gt; gets
parsed and the valid values are added to the enumerations. That however has one
drawback: if the standard gets updated, and a new constraint is put upon another
field then an according class would have to be created manually.&lt;/p&gt;
&lt;p&gt;In the end I still have to think about how it is done best, and what is the most
maintainable version. Already I tend to latter option, because when the standard
changes, most probably also the implementation of this plugin has to change.&lt;/p&gt;&lt;/div&gt;</description><category>bcf</category><category>bim</category><category>class-diagram</category><category>GSoC</category><guid>https://podestplatz.github.io/FreeCAD-blog/posts/how-to-represent-extensionxsd-constraints/</guid><pubDate>Sun, 12 May 2019 15:54:21 GMT</pubDate></item><item><title>BCF Reference Collection - GSoC 2019 </title><link>https://podestplatz.github.io/FreeCAD-blog/posts/references-to-read/</link><dc:creator>FreeCAD Community</dc:creator><description>&lt;div&gt;&lt;p&gt;Following is a list of all references that were mentioned in the forum. I split
them into two categories (for now): Documentation, Implementation Reference. In
former category standards and definitions are to be found (e.g.: BCF-XML
Documentation). The category "Implementation Reference" shall hold links to
examples, tutorials etc.&lt;/p&gt;
&lt;p&gt;This list of references is most likely to grow over time.&lt;/p&gt;
&lt;div class="section" id="diskussion"&gt;
&lt;h2&gt;Diskussion&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://forum.freecadweb.org/viewtopic.php?style=4&amp;amp;f=23&amp;amp;t=22641&amp;amp;start=10"&gt;Forum topic on BCF&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="documentation"&gt;
&lt;h2&gt;Documentation&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.linkedin.com/pulse/how-get-most-out-open-bim-alejandro-mata/"&gt;How to Get Most out of OpenBim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/BuildingSMART/BCF-XML/tree/master/Documentation"&gt;BCF-XML Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://forum.freecadweb.org/viewtopic.php?f=18&amp;amp;t=12833"&gt;FEM Python coding standard&lt;/a&gt;: coding guidlines that I want to adhere to
during development (written by PrzemoF).&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="implementation-reference"&gt;
&lt;h2&gt;Implementation Reference&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/opensourceBIM/BIMbots-FreeCAD"&gt;BIMBots-FreeCAD&lt;/a&gt;: standalone plugin created by Yorik, serves as example on
plugin programming in FreeCAD&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://doc.qt.io/qt-5/qtdesigner-manual.html"&gt;QTDesigner Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/teocomi"&gt;Matteo Cominetti&lt;/a&gt;: Author of the GNU BCFier plugin. May be a useful contact
on questions regarding BCF definition.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/opensourceBIM/BCF-Forum"&gt;BCF Server and Forum&lt;/a&gt;: "[...] Wordpress plugin to create a 'BCF topic
server' from your wordpress installation [...]"&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>bcf</category><category>bim</category><category>GSoC</category><guid>https://podestplatz.github.io/FreeCAD-blog/posts/references-to-read/</guid><pubDate>Sat, 11 May 2019 08:08:01 GMT</pubDate></item><item><title>Introduction to FreeCAD development</title><link>https://podestplatz.github.io/FreeCAD-blog/posts/introduction-to-freecad-development/</link><dc:creator>FreeCAD Community</dc:creator><description>&lt;div&gt;&lt;p&gt;Have you ever wanted to contribute back to the project? Let us help you getting started!&lt;/p&gt;
&lt;p&gt;If you want to contribute, write a thread about what you want to do in the developers corner and we will do our best to get you going. This post provides a brief overview of our workflow.&lt;/p&gt;
&lt;div class="section" id="forum"&gt;
&lt;h2&gt;Forum&lt;/h2&gt;
&lt;p&gt;The FreeCAD forum: &lt;a class="reference external" href="https://forum.freecadweb.org/"&gt;https://forum.freecadweb.org/&lt;/a&gt; is the primary place for communication between FreeCAD users as well as developers.
This should be the first place to search for answers if you have any questions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; When you create a forum account, it might take a while before it's activated as the process is currently manual. This is done to limit spamming.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="issues-tickets"&gt;
&lt;h2&gt;Issues/Tickets&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;FreeCAD uses &lt;a class="reference external" href="https://mantisbt.org/"&gt;MantisBT&lt;/a&gt; as its tracker for bug reporting and feature requests.&lt;/div&gt;
&lt;div class="line"&gt;The FreeCAD tracker address is &lt;a class="reference external" href="https://freecadweb.org/tracker/"&gt;https://freecadweb.org/tracker/&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;strong&gt;Note:&lt;/strong&gt; In order to create issues you will have to create an separate MantisBT account.&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As we are getting a lot of reports please follow the rules before creating a new issue&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Make sure you're using the most updated stable or development versions of FreeCAD.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PLEASE PLEASE PLEASE&lt;/strong&gt; post to FreeCAD forum to verify the issue.&lt;/li&gt;
&lt;li&gt;Only after community vetting, open a ticket and link said thread to ticket and vice-a-versa.&lt;/li&gt;
&lt;li&gt;Post your &lt;strong&gt;Help&amp;gt;About FreeCAD&amp;gt;Copy to clipboard&lt;/strong&gt; version info in to forum thread and ticket.&lt;/li&gt;
&lt;li&gt;Post a Step-By-Step explanation on how to recreate the issue.&lt;/li&gt;
&lt;li&gt;If possible, upload an example file to demonstrate problem.&lt;/li&gt;
&lt;li&gt;If there is a crash involved, please consider &lt;a class="reference external" href="https://freecadweb.org/wiki/Debugging"&gt;Debugging&lt;/a&gt; and attaching the traceback to the ticket.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="documentation"&gt;
&lt;h2&gt;Documentation&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;FreeCAD uses &lt;a class="reference external" href="https://mediawiki.org"&gt;MediaWiki&lt;/a&gt; for its documentation. To be able to modify the wiki, you must &lt;a class="reference external" href="https://forum.freecadweb.org/viewtopic.php?f=21&amp;amp;t=6830"&gt;request access from the FreeCAD wiki admins&lt;/a&gt;.&lt;/div&gt;
&lt;div class="line"&gt;&lt;strong&gt;Note:&lt;/strong&gt; To get an Wiki account we require you to have a forum account with at least 1 post.&lt;/div&gt;
&lt;div class="line"&gt;Before you start changing things in the wiki please read the &lt;a class="reference external" href="https://www.freecadweb.org/wiki/WikiPages"&gt;WikiPages&lt;/a&gt; guidelines,&lt;/div&gt;
&lt;div class="line"&gt;There are several rules on how to write on the wiki to keep it organized, high quality, translated and up to date. It's our practice to discuss the additions/changes one wants to make in the &lt;a class="reference external" href="https://forum.freecadweb.org/viewforum.php?f=21"&gt;FC wiki subforum&lt;/a&gt; prior to posting.&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="code"&gt;
&lt;h2&gt;Code&lt;/h2&gt;
&lt;p&gt;The FreeCAD codebase is mostly C++ and Python, we are currently migrating to Python3, new contributions based on Python2.X are frowned upon.
The git repo is hosted at &lt;a class="reference external" href="https://github.com/FreeCAD/FreeCAD"&gt;https://github.com/FreeCAD/FreeCAD&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="development"&gt;
&lt;h2&gt;Development&lt;/h2&gt;
&lt;p&gt;If you're interested developing for FreeCAD please look into&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Read the &lt;a class="reference external" href="https://www.freecadweb.org/wiki/index.php?title=The_FreeCAD_source_code"&gt;Source code wiki page&lt;/a&gt; and check the &lt;a class="reference external" href="https://www.freecadweb.org/api/annotated.html"&gt;API reference&lt;/a&gt; .&lt;/li&gt;
&lt;li&gt;Creating your own workbench (See &lt;a class="reference external" href="https://www.freecadweb.org/wiki/Workbench_creation"&gt;Workbench Creation&lt;/a&gt; , &lt;a class="reference external" href="https://www.freecadweb.org/wiki/Module_Creation"&gt;Module Creation&lt;/a&gt; , &lt;a class="reference external" href="https://github.com/FreeCAD/Workbench-Starterkit"&gt;Workbench Starterkit&lt;/a&gt; )&lt;/li&gt;
&lt;li&gt;Modifying an existing workbench (View source code of any external workbench at &lt;a class="reference external" href="https://github.com/FreeCAD/FreeCAD-addons"&gt;FreeCAD-Addons Repo&lt;/a&gt; )&lt;/li&gt;
&lt;li&gt;Creating your own macro (Read more about &lt;a class="reference external" href="https://www.freecadweb.org/wiki/Macros"&gt;FreeCAD Macros&lt;/a&gt; and the &lt;a class="reference external" href="https://github.com/FreeCAD/FreeCAD-macros"&gt;FreeCAD Macros Repo&lt;/a&gt; )&lt;/li&gt;
&lt;li&gt;Building FreeCAD and writing C++ code (See &lt;a class="reference external" href="https://github.com/FreeCAD/FreeCAD#compiling"&gt;Compiling instructions&lt;/a&gt; )&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://podestplatz.github.io/FreeCAD-blog/posts/introduction-to-freecad-development/</guid><pubDate>Sat, 10 Nov 2018 21:11:10 GMT</pubDate></item><item><title>Summary of FreeCAD Development so far</title><link>https://podestplatz.github.io/FreeCAD-blog/posts/09-07-2018-Summary/</link><dc:creator>FreeCAD Community</dc:creator><description>&lt;div&gt;&lt;p&gt;Greetings to all FreeCADers, this post is created by a FreeCAD volunteer to keep the community up to date about how 0.18 development is progressing. Since FreeCAD has a pretty long release cycle (the team has decided on a yearly cycle)
this blog then will come in handy for folks that are really wanting to use the vibrant and prolific bleeding-edge of FreeCAD (AKA 'HEAD' or the master branch) where many bugs are being removed (Hopefully! :wink:) and new features being woven in for testing and refinement.&lt;/p&gt;
&lt;p&gt;It is the intention that there will be a post at the end of each month of FreeCAD development updates. Though that may seem a little ambitious, it may not be far from reality. For example, one of the core developers, Yorik Van Havre, creates a blog post on his &lt;a class="reference external" href="http://yorik.uncreated.net/guestblog.php?tag=freecad"&gt;website&lt;/a&gt; for his supporters every month with an update regarding his monthly FreeCAD hacking activities. So at the very least we'll figure out a way to link to his blog posts.&lt;/p&gt;
&lt;p&gt;The main goal of the 0.18dev cycle is to iron out all Python3 and Qt5 incompatibilities.&lt;/p&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Tracking Python3 and Qt5 compatibility is ongoing. Ways to track progress: &lt;a class="reference external" href="https://forum.freecadweb.org/viewtopic.php?f=10&amp;amp;t=30624"&gt;Python3 and Qt5 Compatible Addon Workbenches (in preparation for 0.18)&lt;/a&gt;. Many fixes provided by @looooo and @wmayer and others.&lt;/li&gt;
&lt;li&gt;An upgrade to the Start Page Workbench was &lt;a class="reference external" href="https://github.com/FreeCAD/FreeCAD/pull/1617"&gt;merged&lt;/a&gt;. The UI has been modernized and updated with a Notepad that persists between FreeCAD sessions.&lt;/li&gt;
&lt;li&gt;Arch Stair was improved see &lt;a class="reference external" href="https://forum.freecadweb.org/viewtopic.php?f=23&amp;amp;t=29358"&gt;FreeCAD forum thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Assembly3 port continues to receive a lot of attention and care for &lt;a class="reference external" href="https://github.com/realthunder"&gt;@realthunder&lt;/a&gt; and a lot of interest from the rest of the FreeCAD community. Progress of As3 can be followed on the &lt;a class="reference external" href="https://github.com/realthunder/FreeCAD_assembly3/"&gt;git repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Several Sketcher Solver refinements made it in to master, thanks to &lt;a class="reference external" href="https://github.com/abdullahtahiriyo"&gt;@abdullahtahiriyo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;New Workbenches added to FreeCAD Addon Manager: &lt;a class="reference external" href="https://github.com/caceres/SlopedPlanesMacro"&gt;SlopedPlanes&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/furti/FreeCAD-Lithophane/"&gt;Lithopane&lt;/a&gt;, and &lt;a class="reference external" href="https://github.com/FredsFactory/FreeCAD_AirPlaneDesign/"&gt;AirPlaneDesign&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GSOC 2018 participant, @kkremitzki, completed his assignment of heroically maneuvering through the dependency hell that FreeCAD requires. Many upstream dependencies have been updated and are either pending or part of the upstream Debian package repositories which will make compiling FreeCAD more uniform across most *nix-based platforms.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://podestplatz.github.io/FreeCAD-blog/posts/09-07-2018-Summary/</guid><pubDate>Fri, 07 Sep 2018 19:41:57 GMT</pubDate></item><item><title>Announcing the FreeCAD Development Blog</title><link>https://podestplatz.github.io/FreeCAD-blog/posts/announcing-the-freecad-development-blog/</link><dc:creator>Kurt Kremitzki</dc:creator><description>&lt;div&gt;&lt;div class="figure align-center"&gt;
&lt;img alt="/images/EmojiOne.png" src="https://podestplatz.github.io/FreeCAD-blog/images/EmojiOne.png"&gt;
&lt;p class="caption"&gt;CC-BY-SA: &lt;a class="reference external" href="https://www.emojione.com/"&gt;EmojiOne&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This is the debut post for the FreeCAD Development Blog, which provides a unique
opportunity to bring the best FreeCAD development news and updates from the
community of developers and users.&lt;/p&gt;
&lt;p&gt;The blog uses the Python-based &lt;a class="reference external" href="https://getnikola.com/"&gt;Nikola&lt;/a&gt; which provides an
intuitive command-line interface (see &lt;tt class="docutils literal"&gt;nikola help&lt;/tt&gt; after installation)
and consumes &lt;a class="reference external" href="http://www.sphinx-doc.org/en/stable/rest.html"&gt;reStructuredText&lt;/a&gt; files.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://themes.getnikola.com/"&gt;Custom themes&lt;/a&gt; are available, and standard CSS/JS
customization is possible as well. Nikola supports &lt;span class="math"&gt;\(\LaTeX\)&lt;/span&gt; equation rendering.
It also has good multilingual support, key for FreeCAD's international community.
Nikola also comes with RSS support out of the box, so readers of this site can
subscribe for automatic updates.&lt;/p&gt;
&lt;p&gt;You can contribute posts by following a few steps. First, visit the &lt;a class="reference external" href="https://github.com/freecad/freecad-blog"&gt;the repository
for the blog source&lt;/a&gt; and click the "Fork" button.
You can read about &lt;a class="reference external" href="https://getnikola.com/getting-started.html"&gt;installing Nikola&lt;/a&gt; or (assuming you have pip)
just run &lt;tt class="docutils literal"&gt;sudo apt install &lt;span class="pre"&gt;python3-pip&lt;/span&gt; &amp;amp;&amp;amp; pip3 install &lt;span class="pre"&gt;--user&lt;/span&gt; &lt;span class="pre"&gt;-U&lt;/span&gt; nikola webassets ws4py watchdog&lt;/tt&gt;. Then you need to clone your forked repository
by running:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ git clone https://github.com/&amp;lt;your-username&amp;gt;/freecad-blog &amp;amp;&amp;amp; cd freecad-blog
$ nikola auto -b # Run autobuild and open an auto-refreshing browser window
$ nikola new_post # Follow the prompts and then edit posts/your_title.rst until satisfied
$ git add posts/your_title.rst # Begin the pull request process...
&lt;/pre&gt;
&lt;p&gt;... and then finishing by making a pull request on the main repository using the commits you've
pushed to your fork.&lt;/p&gt;
&lt;p&gt;Once the pull request is merged, anyone with write permission to the
&lt;a class="reference external" href="https://github.com/freecad/freecad.github.io"&gt;repository for built pages&lt;/a&gt;
can then use &lt;tt class="docutils literal"&gt;nikola build &amp;amp;&amp;amp; nikola deploy&lt;/tt&gt; to build and deploy the new post.&lt;/p&gt;&lt;/div&gt;</description><category>mathjax</category><guid>https://podestplatz.github.io/FreeCAD-blog/posts/announcing-the-freecad-development-blog/</guid><pubDate>Sun, 04 Mar 2018 19:09:59 GMT</pubDate></item></channel></rss>