<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>FreeCAD BCF-Plugin development blog (Posts about DevLog)</title><link>https://podestplatz.github.io/FreeCAD-blog/</link><description></description><atom:link href="https://podestplatz.github.io/FreeCAD-blog/categories/cat_devlog.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2019 &lt;a href="mailto:podestplatz@gmail.com"&gt;Patrick Podest&lt;/a&gt; </copyright><lastBuildDate>Wed, 17 Jul 2019 14:46:11 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Dev Logs</title><link>https://podestplatz.github.io/FreeCAD-blog/posts/dev-logs/</link><dc:creator>Patrick Podest</dc:creator><description>&lt;div&gt;&lt;p&gt;This is a daily updated log of the work I do on the &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/"&gt;BCF-plugin&lt;/a&gt; for FreeCAD&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;July 17th:&lt;/strong&gt; Now two options are available for exploring the available
viewpoints. The one was already added and is the SnapshotBar. It is still
lacking the functionality to activate a viewpoint when a certain click event
happens. The second option is a viewpoints list. It lists all the viewpoints
available in a selected topic. If this viewpoint also references a snapshot file
then an icon of this snapshot file is shown beside the viewpoint filename. The
icon can be changed in size by calling &lt;cite&gt;ViewpointsListModel.setIconSize()&lt;/cite&gt;, per
default it is set to be 10 millimeters in width and height. Sizes are expected
to be given in millimeters. The commit adding the Viewpoints list is &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/18c5b9e0253930d0bd254a78f685da9bd2ade7cd"&gt;commit
18c5b9e&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The next commit, &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/24bd9295a93c57c90f8bf26cf10f739b1721422a"&gt;commit 24bd929&lt;/a&gt;, somehow is separate from the above one, but
is also required by it. It adds the function &lt;cite&gt;util.getCurrentQScreen()&lt;/cite&gt; to
&lt;cite&gt;util.py&lt;/cite&gt;. This function returns the &lt;a class="reference external" href="https://doc.qt.io/qt-5/qscreen.html"&gt;QScreen&lt;/a&gt; associated with the screen the
current Qt application is shown on. This serves the purpose of retrieving the
correct DPI setting to be able to convert the millimeter sizes to pixels.&lt;/p&gt;
&lt;p&gt;Then the bug fix, which cost me some time (3.5 hours to be exact), of &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/fe7d19597cebf8218ef48cbbd75e47a815c0c38b"&gt;commit
fe7d195&lt;/a&gt; fixes the issue where the size of a comment list element is not
properly resized, as its painted area increases or decreases in height.&lt;/p&gt;
&lt;p&gt;The remaining time today, 3 hours, I spent with applying the viewpoint settings
to the active view in FreeCAD. As many of you will know, Quarternions are a
great tool for representing rotations in the three dimensional space. When
applying the camera settings, inevitably a rotation has to take place, which are
done in FreeCAD using ... exactly! Quarternions. Initially
I thought that I didn't have to be concerned with Quarternions as some library
functions exist that handle it for me. But during the application of the
viewpoint settings, I noticed that my approach to rotating the camera does
probably not work. So I walked through &lt;a class="reference external" href="https://eater.net/quaternions"&gt;this explorative video series&lt;/a&gt;, which
is great, to get a better understanding of them and how to operate with them.
I want to better understand the 3D rotations and how FreeCAD does them, to be
able to correctly rotate the camera.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;July 16th:&lt;/strong&gt; I finished the SnapshotBar I was talking about yesterday. Till
now it just shows a maximum of three snapshots. The way I implemented it is a
bit hacky because I didn't find a suitable way to just display labels, that
contain a pixmap, inside of a list view. So I am just using the
&lt;cite&gt;Qt.DecorationRole&lt;/cite&gt; to display the icons of the list elements, and nothing else.
To check it out see &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/0938ac01ac953146aa12d56c2b5578c7660101e7"&gt;commit 0938ac0&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the second "major" commit today I implemented word-wrapping for the comment
text. For this I integrated the &lt;cite&gt;width&lt;/cite&gt; of the widget into the associated
delegate class (&lt;cite&gt;CommentDelegate&lt;/cite&gt;), I couldn't find any other way to access,
reliably, the current width of the widget, which serves as base for the wrapping
calculation. This is still in development and is buggy. For example: the list
items do not properly resize when the width of the window decreases and the
comments are wrapped. But on the upside: the bug with the wrongly placed
&lt;cite&gt;Delete&lt;/cite&gt; button was fixed during developing the comment wrapping. All of this is
contained in &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/d20a3a9bdcdfb08a3ee352c2e5cd946b6de6307e"&gt;commit d20a3a9&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;July 15th:&lt;/strong&gt; Today I mostly worked offline, and only published one commit.
The &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/3642e4794e052ab43a1fa44460a69ee7301d14ad"&gt;commit 3642e47&lt;/a&gt; adds the feature that the color of a comment is blue if it
references a viewpoint. Otherwise it will be drawn in black.&lt;/p&gt;
&lt;p&gt;Most of the work today, I did on the "SnapshotBar", as I call it. This shall be
a collection of classes (comprised of model classes and view classes) that
display small versions of the snapshots contained in the project. It shall
present three snapshots in a row, and if more snapshots are present in the topic
then a vertical scrollbar is available.&lt;/p&gt;
&lt;p&gt;However, I am currently still struggling with getting the images to show using a
&lt;cite&gt;QListView&lt;/cite&gt;. I tried returning a &lt;cite&gt;QLabel&lt;/cite&gt; from &lt;cite&gt;SnapshotModel.data()&lt;/cite&gt; into which
already the desired picture is loaded, but it did not work that way. Hopefully I
get it done by tomorrow.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;July 14th:&lt;/strong&gt; Today also I did not work on the plugin.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;July 13th:&lt;/strong&gt; I did not work on the plugin today.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;July 12th:&lt;/strong&gt; The usability of the plugin was greatly improved today!&lt;/p&gt;
&lt;p&gt;Most of the time today I was working on the feature to delete comments from the
UI. The way I want to do it is with a button that appears on the right side of
the comment when the mouse hovers the comment. It still is not perfect, but
already usable. The accompanying commit is &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/051622cea6fe0f1091a8093f283e3a120506d031"&gt;commit 051622c&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/051622cea6fe0f1091a8093f283e3a120506d031"&gt;commit 051622c&lt;/a&gt; contains one particular line that I changed. It was a
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Heisenbug#Related_terms"&gt;higgs-bugson&lt;/a&gt;, at least that is the most fitting classification. The behaviour
expressed was that comments were deleted by pressing the button... in the file
but not in the model. Strangely my testbench for deleting objects, especially
comments, worked. After long debugging I noticed that my policy of not exposing
the real working data to the UI came back to haunt me. My &lt;cite&gt;pI.deleteObject&lt;/cite&gt;
function looked like this:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_35425bcc7eca45f7955acc577f99fa21-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deleteObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_35425bcc7eca45f7955acc577f99fa21-2"&gt;&lt;/a&gt;  &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;curProject&lt;/span&gt;
&lt;a name="rest_code_35425bcc7eca45f7955acc577f99fa21-3"&gt;&lt;/a&gt;  &lt;span class="n"&gt;realObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;searchObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_35425bcc7eca45f7955acc577f99fa21-4"&gt;&lt;/a&gt;  &lt;span class="n"&gt;realObject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DELETED&lt;/span&gt;
&lt;a name="rest_code_35425bcc7eca45f7955acc577f99fa21-5"&gt;&lt;/a&gt;  &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addProjectUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curProject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;realObject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_35425bcc7eca45f7955acc577f99fa21-6"&gt;&lt;/a&gt;  &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;processProjectUpdates&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_35425bcc7eca45f7955acc577f99fa21-7"&gt;&lt;/a&gt;  &lt;span class="n"&gt;curProject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deleteObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The last line here was the culprit. It is responsible for deleting the object
from the data model after it was deleted from the file. Here I used the wrong
reference, namely the one of the copy of the real object.&lt;/p&gt;
&lt;p&gt;Then &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/b15667183dacf3b6715759e353c55375d9b2f71d"&gt;commit b156671&lt;/a&gt; adds a save button, that opes a "save-file-dialog" and
lets the user save the current state of the working directory.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/253e3a956e62926d208b863b88f282a2a7c4772d"&gt;commit 253e3a9&lt;/a&gt; fixes the bug where the comment list was not reset when the
topics were switched.&lt;/p&gt;
&lt;p&gt;There are still some commits I pushed today, but these were the most notable
ones.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;July 11th:&lt;/strong&gt; Qt is easy to start with, but hard to get right.&lt;/p&gt;
&lt;p&gt;I today was mostly on bug hunts, why some stuff was not showing or behaving as I
wanted it to. Like for example the horizontal scrolling in the comment view. It
somehow did not draw the correct contents when scrolled horizontally.
Furthermore was the horizontal scrollbar kind of inconsistent. It did not always
show up. Both these issues are fixed in &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/f82e40a9f2f5e8fbcf6cf7cbf3c9bb2e96232654"&gt;commit f82e40a&lt;/a&gt;. The first bug was
resolved by correctly setting the drawing position according to
&lt;a class="reference external" href="https://doc.qt.io/qt-5/qstyleoptionviewitem.html"&gt;QStyleOptionViewItem options&lt;/a&gt;. The second bug was caused by an incorrect
calculation of the length of an item in the list in
&lt;cite&gt;plugin_delegate.sizeHint()&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;What is particular noteworthy is that the plugin now can also be opened in the
taskpanel of FreeCAD. This functionality was added in &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/b2ebca5d15d628da4c150dc5a9db723688f49dc3"&gt;commit b2ebca5&lt;/a&gt; and can
be used (will be streamlined in the future) by executing the following two
commands inside of the FreeCAD python console.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_a948bcd28a794a62a0f7685e86d226b9-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bcfplugin.gui.plugin_panel&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;panel&lt;/span&gt;
&lt;a name="rest_code_a948bcd28a794a62a0f7685e86d226b9-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;panel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;launch_ui&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;I also had an issue with FreeCAD itself and its behavior of swallowing
exceptions that are thrown inside of my plugin. It is really nice that an
exception inside an outside plugin does not crash FreeCAD, and that is how it is
supposed to be. But an error message, that an exception was thrown inside the
plugin, would sometimes greatly improve debugging. The bug that made me aware of
this fact was that in the comment view comments were shown in FreeCAD on my PC
running ArchLinux but were not shown on the virtual machine running Ubuntu
18.04. This behavior was rooted in a missing import of &lt;cite&gt;QtCore.Qt&lt;/cite&gt; in
&lt;cite&gt;plugin_delegate.py&lt;/cite&gt; and &lt;cite&gt;plugin_mode.py&lt;/cite&gt;. Strangely, though, it worked on my PC
when it actually shouldn't. Anyways, the fix is contained in &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/9cfb5fa4bae30a43c77bea363c0caf54d9f78f8b"&gt;commit 9cfb5fa&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally, not only bugs were fixed today, also something new was added to the UI.
Below the comment list a &lt;cite&gt;QLineEdit&lt;/cite&gt; is now accessible for adding new comments.
A new comment can be submitted by hitting enter after finished. Not only the
comment has to be entered into this field, however, the author's E-Mail has to
be appended to the comment, separating the two with ' -- '. If an invalid
comment is about to be inserted a tooltip will be shown with a guide to how the
text shall be structured in order for it to be added. This functionality was
added in &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/47eaded6a02b76ebc162d7380cd4ae908139facd"&gt;commit 47eaded&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;July 10th:&lt;/strong&gt; My work today boils down to this:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The comment list is finished, apart from a small bug when scrolling
horizontally&lt;/li&gt;
&lt;li&gt;The programmaticInterface got a new function to apply visibility settings of a
viewpoint to the objects in the view.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So now the more detailed version:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/fc93660a8108ba98bac265e3689532c3975609fc"&gt;commit fc93660&lt;/a&gt; fixed two bugs when painting the comment list. Both were
caused by a wrong use of Qt. Previously the position, at which the next comment
should be drawn, was calculated by hand. Now this position is taken from the
argument &lt;cite&gt;options&lt;/cite&gt; and its member &lt;cite&gt;rect&lt;/cite&gt;.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_a5f6330277f24e0c95ed648de307a2ea-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;paint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;painter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_a5f6330277f24e0c95ed648de307a2ea-2"&gt;&lt;/a&gt;  &lt;span class="n"&gt;topY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/c93b00461a557db637f52b105b7a3c5c58f952a1"&gt;commit c93b004&lt;/a&gt; extended &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/bc9664236bf09c60cfd73cde8ea6160f342bf8a1/bcfplugin/programmaticInterface.py#L876"&gt;pI.getTopic()&lt;/a&gt; with some context awareness. The
general approach is to not expose the data model to the UI layer. Thus for every
retrieve action, requested from &lt;cite&gt;pI&lt;/cite&gt;, a deep copy of the actual object is
returned instead of just the reference. &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/bc9664236bf09c60cfd73cde8ea6160f342bf8a1/bcfplugin/programmaticInterface.py#L876"&gt;pI.getTopic()&lt;/a&gt; however is used inside
and outside &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/feature/PI_retrieval/bcfplugin/programmaticInterface.py"&gt;pI&lt;/a&gt;. If it is called from inside of the same module the correct
reference to the actual element shall be returned, if however called from the
outside a copy has to be created and returned to the calling function.
&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/bc9664236bf09c60cfd73cde8ea6160f342bf8a1/bcfplugin/programmaticInterface.py#L876"&gt;pI.getTopic()&lt;/a&gt; is now able to do this, using the &lt;a class="reference external" href="https://docs.python.org/3/library/inspect.html"&gt;inspect&lt;/a&gt; module.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/a702021d1ae226a256ec9c3341ef028855eb6170"&gt;commit a702021&lt;/a&gt; integrated the &lt;cite&gt;pI&lt;/cite&gt; into the model of the comment list, this
commit therefore made it possible to view actual comments of a bcf file that
gets opened during runtime.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/894de41ef6489fd54efca1000f65dc07e47525b0"&gt;commit 894de41&lt;/a&gt; introduces the logical next step to the previous commit. It
integrated the comment list into the existing plugin, which previously could
open a project and let the user choose between topics. Now, after the user has
chosen a topic, all comments will be visible and available for modification. The
modification however is constrained with a &lt;a class="reference external" href="https://doc.qt.io/qt-5/qvalidator.html"&gt;QValidator&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/9814bb439c2283a5749444b5672ba244b9c78b83"&gt;commit 9814bb4&lt;/a&gt; adds the functionality of displaying a small pop up window
showing an error to the user.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/bc9664236bf09c60cfd73cde8ea6160f342bf8a1"&gt;commit bc96642&lt;/a&gt; contains the functionality of applying visibility settings to
the objects in the currently open view.&lt;/p&gt;
&lt;p&gt;To checkout the current state of the plugin run the following command from the
directory &lt;cite&gt;./bcfplugin/gui&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_09b2d86c44684300bf17ef2c99db3d7f-1"&gt;&lt;/a&gt;python plugin_view.py
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;July 9th:&lt;/strong&gt; Well I have learned a lot about Qt and how I can customize
existing views with delegates and models. That said the main advancement of
today was the creation of the comments list, how I would like it.&lt;/p&gt;
&lt;p&gt;For this development of the comment list I have opened a new feature branch
ontop of &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commits/feature/gui"&gt;feature/gui&lt;/a&gt; called &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commits/feature/gui_comment_list"&gt;feature/gui_comment_list&lt;/a&gt;. &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/5f242fde1987d106c7c52a90a1aeb9543b48be42"&gt;commit 5f242fd&lt;/a&gt;
adds the first (usable) version of the list. It is based on the &lt;a class="reference external" href="https://doc.qt.io/qt-5/model-view-programming.html"&gt;model/view&lt;/a&gt;
approach of qt and uses a custom delegate to display the list items. The
development files are located inside of &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/tree/feature/gui_comment_list/bcfplugin/gui/comment-list"&gt;./bcfplugin/gui/comment-list/&lt;/a&gt;.
To try it just run&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_ec77cdb9a22f4784ab41314643432590-1"&gt;&lt;/a&gt;python mainwindow.py
&lt;/pre&gt;&lt;p&gt;from inside the before mentioned directory.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;July 8th:&lt;/strong&gt; Today I started with the first version of the gui. It is
completely contained in &lt;cite&gt;./bcfplugin/gui/plugin_view.py&lt;/cite&gt;, but uses
&lt;cite&gt;./bcfplugin/gui/plugin_model.py&lt;/cite&gt; to get the data to display. Currently when
&lt;cite&gt;plugin_view.py&lt;/cite&gt; is run the user is given the option to open a BCF file, through
an &lt;cite&gt;QFileDialog&lt;/cite&gt;. If one was selected the gui removes the "open-file-section"
and replaces it with:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;a label displaying the project name&lt;/li&gt;
&lt;li&gt;a label just displaying "Topic" and a combobox filled with a list of the
available topics.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The commit adding the two files is &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/6887d529f1e3993667338f68402782597d54f63c"&gt;commit 6887d52&lt;/a&gt;.
&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/85d1e8b683612a6b28763ffccfc9689269ba77f4"&gt;commit 85d1e8b&lt;/a&gt; finishes function &lt;cite&gt;viewController.colourComponents()&lt;/cite&gt; that
applies the colour specified in &lt;cite&gt;viewpoint.bcf&lt;/cite&gt; to the (also in &lt;cite&gt;viewpoint.bcf&lt;/cite&gt;)
specified components.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;July 7th:&lt;/strong&gt; The weekend I did no work for the plugin&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;July 6th:&lt;/strong&gt; I didn't do any work today.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;July 5th:&lt;/strong&gt; The first steps to the gui part of the plugin are made!
But first things first. As the programmatic interface is nearly finished in its
basic functionality, I merged the feature branch &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commits/feature/PI_retrieval"&gt;feature/PI_retrieval&lt;/a&gt; into
&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commits/develop"&gt;develop&lt;/a&gt;. This is done in &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/230c1d53f71f8b6c8d12c5066586199c589e16ca"&gt;commit 230c1d5&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/0a27fd2307ba64e4fbbd9b58f2a3fc4a3d1ce505"&gt;commit 0a27fd2&lt;/a&gt; adds the functionality to &lt;cite&gt;writer.py&lt;/cite&gt; to add a project file
and create a new bcf file. A new BCF file will at first only exist in the
temporary directory until the function &lt;cite&gt;writer.zipToBcfFile()&lt;/cite&gt; is called.&lt;/p&gt;
&lt;p&gt;Now onto the gui stuff: I added a new branch &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commits/feature/gui"&gt;feature/gui&lt;/a&gt; on which I will
develop the gui part of the plugin at first. On this branch already some commits
exist but the most notable ones are: &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/53d9dcfd29768eefc02f091480a0c3fa41449af4"&gt;commit 53d9dcf&lt;/a&gt; which adds an example
model view application that just contains a combobox that lets the user choose
between the available topics in a hardcoded bcf file. This application just
serves as a proof of concept and guiding line over the next days.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/900578927ca57db2f527284d4c13bb8a2b4c48ab"&gt;commit 9005790&lt;/a&gt; adds two functions that somewhat control the 3D view of
FreeCAD. The first is &lt;cite&gt;vC.getIfcObjects()&lt;/cite&gt; (&lt;cite&gt;vC&lt;/cite&gt; stands for &lt;cite&gt;viewController&lt;/cite&gt;)
which compiles a dictionary of all objects in a document that have a IfcUID.
Here a big thanks to Yorik who provided example code in his &lt;a class="reference external" href="https://forum.freecadweb.org/viewtopic.php?p=318880#p318880"&gt;post&lt;/a&gt;. The second
function is &lt;cite&gt;vC.selectComponents()&lt;/cite&gt; which takes on a list of
&lt;cite&gt;viewpoint.Component&lt;/cite&gt; objects and adds every object with a matching IfcUID into
the active selection.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;July 4th:&lt;/strong&gt; PI (Programmatic Interface) is nearing its finish, at least in the
basic functionality. But onto the commits, and thus the work, I have done today:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/0d3d924022e042a17692850e03f23e5d1b2f8386"&gt;commit 0d3d924&lt;/a&gt; is rather small as it just adds a dependency check to
&lt;cite&gt;./bcfplugin/__init__.py&lt;/cite&gt;. &lt;a class="reference external" href="https://pypi.org/project/pytz/"&gt;pytz&lt;/a&gt; is now also checked as dependency.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/66a73a850a9370b3f5e6757dd77f86c2a62abc19"&gt;commit 66a73a8&lt;/a&gt; introduces the function &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/75946dbfd3b302a29b4e5d1ef21211310cdcebbb/bcfplugin/programmaticInterface.py#L375"&gt;pI.addCurrentViewpoint()&lt;/a&gt; whose
purpose it is to create a viewpoint object of the current view in FreeCAD.
Currently only the camera position and orientation is read and stored in either
a &lt;cite&gt;PerspectiveCamera&lt;/cite&gt; or &lt;cite&gt;OrthogonalCamera&lt;/cite&gt; object, depending on the type of the
camera in the FreeCAD view. In the next steps also the highlighted components
shall be detected and read in. But this depends on the ability of discovering
the Ifc guid of a component in FreeCAD.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/36be8ce884799a1803d5d83adfe6676616013c68"&gt;commit 36be8ce&lt;/a&gt; adds the option to add a complete new topic to the project.
Alongside with a topic object, a new folder gets created inside the BCF file and
a new &lt;cite&gt;markup.bcf&lt;/cite&gt; file is created.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/539371fd65ac5ef7d9850ff9116a0a5c7ac043bd"&gt;commit 539371f&lt;/a&gt; incorporates the modification of Topics and Comments in
&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/01fac660932fea2d580cff44421b0a352f893806/bcfplugin/programmaticInterface.py#L750"&gt;pI.modifyElement()&lt;/a&gt;. These two types have the speciality of containing both
&lt;cite&gt;&amp;lt;ModifiedAuthor&amp;gt;&lt;/cite&gt; and &lt;cite&gt;&amp;lt;ModifiedDate&amp;gt;&lt;/cite&gt;. If a Topic or Comment object is
updated then these two fields are automatically set/updated with it.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/75946dbfd3b302a29b4e5d1ef21211310cdcebbb"&gt;commit 75946db&lt;/a&gt; brings some testcases for &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/01fac660932fea2d580cff44421b0a352f893806/bcfplugin/programmaticInterface.py#L750"&gt;pI.modifyElement()&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;July 3rd:&lt;/strong&gt; Today I fully fixed the issue I found in
&lt;cite&gt;writer.getEtElementFromFile()&lt;/cite&gt; yesterday. The issue was rooted in the fact that
there may be xml elements that occur in different parts of the hierarchy with
the same name. For example &lt;cite&gt;&amp;lt;ModifiedAuthor&amp;gt;&lt;/cite&gt; occurs once as child of &lt;cite&gt;&amp;lt;Topic&amp;gt;&lt;/cite&gt;
and once as child of &lt;cite&gt;&amp;lt;Comment&amp;gt;&lt;/cite&gt;. In the algorithm for modifying elements first
compiles a list of candidates, out of which the "to-update" element is picked by
matching on either the children of the element, the text of the element or its
attributes. Now the particular issue was that when someone already modified
&lt;cite&gt;&amp;lt;Topic&amp;gt;&lt;/cite&gt; and a &lt;cite&gt;&amp;lt;Comment&amp;gt;&lt;/cite&gt; then &lt;cite&gt;&amp;lt;ModifiedAuthor&amp;gt;&lt;/cite&gt; would have the exact same
text. Due to insufficient selection of the candidates, both &lt;cite&gt;&amp;lt;ModifiedAuthor&amp;gt;&lt;/cite&gt;
elements (from Topic and Comment) made it into the list. That lead to
indeterministic selection of the element to update.&lt;/p&gt;
&lt;p&gt;This was fixed in &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/17c818e1f61d986bc7c1268b9f2448117e4d47b0"&gt;commit 17c818e&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/ebca39f58f3e9d8788ae513ab005a04b0e80de1d"&gt;commit ebca39f&lt;/a&gt; added &lt;cite&gt;pI.modifyDocumentReference()&lt;/cite&gt;, which, however, is
made obsolete in part by &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/01fac660932fea2d580cff44421b0a352f893806"&gt;commit 01fac66&lt;/a&gt;. In latter one I introduce a more
general modification function &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/01fac660932fea2d580cff44421b0a352f893806/bcfplugin/programmaticInterface.py#L750"&gt;pI.modifyElement()&lt;/a&gt;. It takes on an object of
the data model, which is assumed to be modified. Next, the old element,
referenced by original element, is deleted from file, the object in the data
model is updated with the member variables and added again to the file.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/91ccac8e9ca32af357967aec16749e9b6a1f5497"&gt;commit 91ccac8&lt;/a&gt; adds a backup and rollback system to all functions that alter
the state of the open project.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;July 2nd:&lt;/strong&gt; Today quite a lot was done.
&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/32213e322bd7a82677a3d43039c32eb466897406"&gt;commit 32213e3&lt;/a&gt; updates README.md in &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commits/feature/PI_retrieval"&gt;feature/PI_retrieval&lt;/a&gt; to reflect the
new plugin structure.
&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/00d4758cb0c52b87de00d037ff9045bc66cc35b7"&gt;commit 00d4758&lt;/a&gt; adds &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/9baa5fe22414a57658198246f9f0b8c3ee6a49a2/bcfplugin/programmaticInterface.py#L507"&gt;pI.addDocumentReference()&lt;/a&gt;, which adds a new document
reference to a given topic.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/55f6b2ba17f42f495975574094079a6e82ee4e45"&gt;commit 55f6b2b&lt;/a&gt; adds &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/9baa5fe22414a57658198246f9f0b8c3ee6a49a2/bcfplugin/programmaticInterface.py#L574"&gt;pI.addLabel()&lt;/a&gt;, which adds a new label to a given
topic.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/e65fa52f4244bf67db78438a3b53b220474c9b36"&gt;commit e65fa52&lt;/a&gt; is a rather interesting one: it introduces verbosity levels.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/0af3e03a5279f447e2dfb73790e1c67ae8594ef4"&gt;commit 0af3e03&lt;/a&gt; adds the function &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/9baa5fe22414a57658198246f9f0b8c3ee6a49a2/bcfplugin/programmaticInterface.py#L602"&gt;pI.copyFileToProject()&lt;/a&gt;. Its purpose is to
copy a file into the bcf file, so that it can be distributed alongside the bcf
file itself.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/b54acff39b318b7fe8d799f7d2cabe075c6337b8"&gt;commit b54acff&lt;/a&gt; adds full support for the camera settings in viewpoints.
Now a camera setting of a orthographic camera as well as a perspective camera
can be applied to &lt;cite&gt;FreeCADGui.ActiveDocument.ActiveView&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/9baa5fe22414a57658198246f9f0b8c3ee6a49a2"&gt;commit 9baa5fe&lt;/a&gt; made me aware of a bug in writer, which leads to improper
modification of the xml nodes &lt;cite&gt;ModifiedDate&lt;/cite&gt; and &lt;cite&gt;ModifiedAuthor&lt;/cite&gt;. It also
already sports the beginnings of the fix.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;July 1st:&lt;/strong&gt; As I already mentioned in the updated README.md on branch
&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commits/feature/PI_retrieval"&gt;feature/PI_retrieval&lt;/a&gt; the source code structure had to change. This is what I
have done in &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/4bcb1528cd0a8deadfe020599245d8f11bc7de10"&gt;commit 4bcb152&lt;/a&gt;. Also in this commit I added the function
&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/bf8df202f5f74a995ce93a3b42c52f977301a1bf/bcfplugin/programmaticInterface.py#L370"&gt;pI.addComment()&lt;/a&gt;, which adds a new comment to a topic.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/bf8df202f5f74a995ce93a3b42c52f977301a1bf"&gt;commit bf8df20&lt;/a&gt; added a new function to &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/feature/PI_retrieval/bcfplugin/programmaticInterface.py"&gt;pI.py&lt;/a&gt;. &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/bf8df202f5f74a995ce93a3b42c52f977301a1bf/bcfplugin/programmaticInterface.py#L425"&gt;pI.addFile()&lt;/a&gt; adds a new
file reference to the header node.&lt;/p&gt;
&lt;p&gt;In addition to that I watched yorik's introduction &lt;a class="reference external" href="https://youtu.be/rkWOFQ2fGZQ"&gt;video&lt;/a&gt; to BIM modeling.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;June 28th:&lt;/strong&gt; I gained a hell of a lot of understanding about the inner
workings of FreeCAD. Even if I want to put my main effort right now on the &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/feature/PI_retrieval/bcfplugin/programmaticInterface.py"&gt;pI&lt;/a&gt;
(programmatic interface) the main goal for today was to find out how to set the
camera of the active view to a specified position and orientation. Well I
succeeded with these two main sources: &lt;a class="reference external" href="https://forum.freecadweb.org/viewtopic.php?t=6745"&gt;forum-post by teobo&lt;/a&gt; and &lt;a class="reference external" href="https://www.freecadweb.org/wiki/index.php?title=Macro_FCCamera"&gt;makro
FCCamera by Mario52&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Apart from that I have rewritten the debug, more generally the output system of
my plugin in &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/57c0b286eccdb97da4ea66027776867063a49ce8"&gt;commit 57c0b28&lt;/a&gt;. It now uses FreeCAD's &lt;cite&gt;Console&lt;/cite&gt; to print
outputs, if running inside FreeCAD. Otherwise the outputs will be printed to
&lt;cite&gt;stdout/stderr&lt;/cite&gt;. &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/b4019892c2ad3ef77bca4c6119e2fe2281c40579"&gt;commit b401989&lt;/a&gt; further moved the complete debug
functionality into &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/feature/PI_retrieval/src/bcf/util.py"&gt;util.py&lt;/a&gt;, which makes kind of more sense than leaving it in
&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/feature/PI_retrieval/src/bcf/project.py"&gt;project.py&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My new and gained knowledge of today, about setting the camera's position and
orientation, got baked into a new function of the &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/feature/PI_retrieval/bcfplugin/programmaticInterface.py"&gt;pI&lt;/a&gt;: &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/2fdc65c449d0838551b623c448491387644c49e2/src/frontend/programmaticInterface.py#L327"&gt;pI.activateViewpoint()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The best comes at the end: I updated the wiki page on &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commits/feature/PI_retrieval"&gt;feature/PI_retrieval&lt;/a&gt;.
It now explains how to use the plugin inside FreeCAD's python console. The
associated commit is &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/2fdc65c449d0838551b623c448491387644c49e2"&gt;commit 2fdc65c&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At this point I want to give a great thanks to the efforts of &lt;a class="reference external" href="https://github.com/qingfengxia"&gt;qingfengxia&lt;/a&gt; and
&lt;a class="reference external" href="https://github.com/luzpaz"&gt;luzpaz&lt;/a&gt;. Their &lt;a class="reference external" href="https://github.com/qingfengxia/FreeCAD_Mod_Dev_Guide"&gt;eBook on FreeCAD&lt;/a&gt; helped me a lot today in finding out how to
modify the camera settings.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;June 27th:&lt;/strong&gt; Some development work happened today and some work with FreeCAD
and IFC files.&lt;/p&gt;
&lt;p&gt;Since today I pushed rather many commits with some sporting only minor changes,
I will only mention the bigger ones below.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/25a0ee8093ce35fad2808d51ec2f58d016bcf2cd"&gt;commit 25a0ee8&lt;/a&gt; introduces the &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/7192ca8abb22d333d430b6549e9703a989c9161f/src/frontend/programmaticInterface.py#L199"&gt;pI.getViewpoints()&lt;/a&gt; function. It takes a
topic object and returns all viewpoints mentioned in the corresponding
&lt;cite&gt;markup.bcf&lt;/cite&gt; file.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/fa5af15c56af2af0fa1fcf82f560e3fb0b1b7a76"&gt;commit fa5af15&lt;/a&gt; modifies &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/e31d3b3d22fe81deb000505f6c7cd1fd83cb8d8e/src/frontend/programmaticInterface.py#L142"&gt;pI.getComments()&lt;/a&gt; in a way that it now also
accepts an optional viewpoint object, in addition to the topic object, and
returns a sorted list of comments mentioning that specific viewpoint.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/e56747fa315171fdfa1be3c5c3ca53caa15e627b"&gt;commit e56747f&lt;/a&gt; adds the function &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/7192ca8abb22d333d430b6549e9703a989c9161f/src/frontend/programmaticInterface.py#L228"&gt;pI.getRelevantIfcFiles()&lt;/a&gt;. It returns the
list of files listed in the header node of &lt;cite&gt;markup.bcf&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;Although &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/7192ca8abb22d333d430b6549e9703a989c9161f"&gt;commit 7192ca8&lt;/a&gt; does not add that many new lines, it is quite
significant. It adds the file &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/feature/PI_retrieval/src/BCFPlugin.FCMacro"&gt;BCFPlugin.FCMacro&lt;/a&gt;. The plugin is now already
usable, to an extent, inside FreeCAD, without the gui, however. The wiki page
will be updated tomorrow, still on branch &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commits/feature/PI_retrieval"&gt;feature/PI_retrieval&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To explain a bit more about the work I put into FreeCAD and IFC files: first I
wanted to know how IFC files can be opened using FreeCAD, after that was
accomplished, using &lt;a class="reference external" href="https://github.com/IfcOpenShell/IfcOpenShell"&gt;IfcOpenShell&lt;/a&gt;, I searched for the IFC attributes (like the
id of an ifc object) and where it is stored in the document. Result was: inside
the class &lt;cite&gt;BuildingPart&lt;/cite&gt; the member &lt;cite&gt;IfcAttributes&lt;/cite&gt; exists which is filled with
the attributes I want, at least I think so.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;June 26th:&lt;/strong&gt; Today a considerable amount of work was done in
&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/feature/PI_retrieval/bcfplugin/programmaticInterface.py"&gt;./src/frontend/programmaticInterface.py&lt;/a&gt;. This file is beeing developed on the
new branch &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commits/feature/PI_retrieval"&gt;feature/PI_retrieval&lt;/a&gt;. The first &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/1038be1025ec47c5e40d6544dc73c930bb67d5f0"&gt;commit 1038b31&lt;/a&gt; integrated the
&lt;cite&gt;defaultValue&lt;/cite&gt; member of &lt;cite&gt;SimpleElement&lt;/cite&gt; and &lt;cite&gt;Attribute&lt;/cite&gt; in every
&lt;cite&gt;getEtElement()&lt;/cite&gt; method. For more information please see the &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/1038be1025ec47c5e40d6544dc73c930bb67d5f0"&gt;commit 1038b31&lt;/a&gt;
and its commit message.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/59d1ca8d53c388ca88c749fde4563484cd1397ab"&gt;commit 59d1ca8&lt;/a&gt; changed the validation mode of &lt;a class="reference external" href="https://xmlschema.readthedocs.io/en/latest/"&gt;xmlschema&lt;/a&gt; from 'strict' to
'lax', which means that a list of error messages, if there are some, is
generated and returned with the decoded XML file, instead of throwing
exceptions.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/2c888758dca22a0246456eed056d5a84c715e076"&gt;commit 2c88875&lt;/a&gt; added to &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/feature/PI_retrieval/bcfplugin/programmaticInterface.py"&gt;programmaticInterface.py&lt;/a&gt; (&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/feature/PI_retrieval/bcfplugin/programmaticInterface.py"&gt;pI.py&lt;/a&gt; for short)
the functions &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/e31d3b3d22fe81deb000505f6c7cd1fd83cb8d8e/src/frontend/programmaticInterface.py#L84"&gt;openProject()&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/e31d3b3d22fe81deb000505f6c7cd1fd83cb8d8e/src/frontend/programmaticInterface.py#L107"&gt;getTopics()&lt;/a&gt;. Please see the &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/2c888758dca22a0246456eed056d5a84c715e076"&gt;commit
2c88875&lt;/a&gt; and its message for more information&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/e31d3b3d22fe81deb000505f6c7cd1fd83cb8d8e"&gt;commit e31d3b3&lt;/a&gt; adds &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/e31d3b3d22fe81deb000505f6c7cd1fd83cb8d8e/src/frontend/programmaticInterface.py#L142"&gt;getComments()&lt;/a&gt; to &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/feature/PI_retrieval/bcfplugin/programmaticInterface.py"&gt;pI.py&lt;/a&gt; and prints out all validation
errors if there were some. Also if some required node/attribute in a &lt;cite&gt;viewpoint.bcf&lt;/cite&gt;
file is missing then this file is skipped.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;June 25th:&lt;/strong&gt; Again some things happened outside of the git repo, like filling
out the first evaluation form from &lt;a class="reference external" href="https://summerofcode.withgoogle.com/"&gt;summerofcode.withgoogle.com&lt;/a&gt; or reading
more about the model view paradigm in Qt.
Apart from this still a little dev work has taken place today: &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/cf73654d45223c68c0070b0ce08b56135a35df0c"&gt;commit cf73654&lt;/a&gt;
renames &lt;cite&gt;Topic.refs&lt;/cite&gt; -&amp;gt; &lt;cite&gt;Topic.docRefs&lt;/cite&gt; and &lt;cite&gt;frontendInterface.deleteObject()&lt;/cite&gt;
now uses &lt;cite&gt;writer.addProjectUpdate()&lt;/cite&gt; instead of &lt;cite&gt;writer.addUpdate()&lt;/cite&gt;. Both
accomplish the same, but former is safer to use.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/4d170a72d69e279461c21fc59b8a8f5f4c374d39"&gt;commit 4d170a7&lt;/a&gt; introduces many new comments of functions and already converts
some comments to the official docstring format, as mentioned in yesterdays log
entry.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/6f4b105f523d3a9ad3aa541e3c7ccce5a749a403"&gt;commit 6f4b105&lt;/a&gt; adds function &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/6a63191c0fb5f6d4e56eaccc6697e73b0140d190/src/bcf/writer.py#L993"&gt;writer.createBcfFile()&lt;/a&gt;. This function
compresses the contents of the directory passed as parameter to a zip archive
that complies with the &lt;a class="reference external" href="https://github.com/BuildingSMART/BCF-XML/tree/master/Documentation#bcfzip-encoding-guide"&gt;requirements for BCF archives&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;June 24th:&lt;/strong&gt; I finally found the bug in the test suite for &lt;cite&gt;frontentInterface.deleteObject()&lt;/cite&gt;!
&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/ab09e0a594d1d7a7401ee5e6ea7e81e01a5d40dc"&gt;commit ab09e0a&lt;/a&gt; is the one in question for this change. In addition to that I
started a little refactoring session and I am moving now to the official
docstrings of python in order to generate nice documentation through &lt;a class="reference external" href="https://docs.python.org/3/library/pydoc.html"&gt;pydoc&lt;/a&gt;.
For the UI part I started to look into the model view paradigm, and how this is
done in Qt.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;June 22nd:&lt;/strong&gt; I have written exclusively on the wiki page today as well as
created a (hopefully) informative Readme that gives a crash course on how to use
the plugin in its current state.
&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/wiki"&gt;Here&lt;/a&gt; you will find the wiki page now accompanying the plugin.&lt;/p&gt;
&lt;p&gt;If you jump straigth to the &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/"&gt;repo&lt;/a&gt; you will find the new front page with the
extended README.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;June 21st:&lt;/strong&gt; Today I added a few minor commits. The first beeing &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/3dcb2275a74684bf6da9473856c5493ef31dce1e"&gt;commit
3dcb227&lt;/a&gt; in which I finally deleted the class &lt;cite&gt;Modification&lt;/cite&gt;, which got split
up into &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/59adbab0bee1b72544c8c219106f4eff4d3e206e/src/bcf/modification.py#L13"&gt;modification.ModificationAuthor&lt;/a&gt; and &lt;cite&gt;modification.ModificationDate&lt;/cite&gt;.
For more info please see the log entry of June 19th.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/8ec8c6ff492ac15ea394ba7a76972c6fb10a789a"&gt;commit 8ec8c6f&lt;/a&gt; replaced the debug &lt;cite&gt;print&lt;/cite&gt; instructions with the a call of the
&lt;cite&gt;project.debug()&lt;/cite&gt; function, in &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/master/src/tests/writer_tests.py"&gt;writer_tests.py&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After some debugging I added a &lt;cite&gt;tearDown()&lt;/cite&gt; function to the test cases in
&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/master/src/tests/writer_tests.py"&gt;writer_tests.py&lt;/a&gt;, done in &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/c5cce73d2c9bf99f5fe85d0c0ac751b58f0bfcc0"&gt;commit c5cce73&lt;/a&gt;. Reason beeing that I noticed
strange behavior after I added a test case for adding a whole new topic to a BCF
file. Specifically most test cases failed if run together, but succeeded when
run separately. Reason being that the extracted BCF file wasn't completely
replaced for each new test case, instead it was merely updated. This meant that
the added topic would be read in too by the following test case and thus
invalidate some invariants.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/f91b8633b5fb5870f404e713f4cc7bd8de347bb9"&gt;commit f91b863&lt;/a&gt; added a diagram of the basic structure of the plugin, for the
purpose of the wiki page which I am currently writing.&lt;/p&gt;
&lt;p&gt;In &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/f7a495888d783ac4ec10b93ffc8aaa1752a792ea"&gt;commit f7a4958&lt;/a&gt; I added a whole new file &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/feature_interface_deleteObject/src/bcf/frontendInterface.py"&gt;frontentInterface.py&lt;/a&gt; with a new
function &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/e56123307c964cf693083e8adc5b959940c006b2/src/bcf/frontendInterface.py#L11"&gt;frontentInterface.deleteObject()&lt;/a&gt;. Both currently reside on the
&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commits/feature_interface_deleteObject"&gt;branch feature_interface_deleteObject&lt;/a&gt; branch. This new function shall handle the
complete deletion of an object, by that I mean the deletion from the file,
through the &lt;cite&gt;writer&lt;/cite&gt; module, and the deletion from the data model, through an
also added function &lt;cite&gt;deleteObject()&lt;/cite&gt; inside of &lt;cite&gt;Project&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;Finally &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/e56123307c964cf693083e8adc5b959940c006b2"&gt;commit e561233&lt;/a&gt; added a new test suite, intended for testing the
functions of &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/feature_interface_deleteObject/src/bcf/frontendInterface.py"&gt;frontentInterface.py&lt;/a&gt;. It currently already sports 7 test cases.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;June 20th:&lt;/strong&gt; &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/fed05f2871d43230b9b882041f7011a6a93dc788"&gt;commit fed05f2&lt;/a&gt; renames the Identifiable interface to
XMLIdentifiable and adds a new Identifiable interface. The new interface is
implemented by nearly all classes in the data model and assigns them, upon
creation, a unique id. This enables an efficient search algorithm that uses an
object's id to get the corresponding reference in the data structure. The
Interface &lt;cite&gt;XMLIdentifiable&lt;/cite&gt; is now only used to hold ids that are read in from
the BCF file.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/a0c4f8dad5c7e2d56244c870809ee33b31981387"&gt;commit a0c4f8d&lt;/a&gt; implements the &lt;cite&gt;searchObject()&lt;/cite&gt; function, in nearly all
classes. This function empowers a depth first approach for finding an element.
In addition to this function test cases were added to test it for proper
function.&lt;/p&gt;
&lt;p&gt;Locally I am currently working on the first part of the &lt;cite&gt;data model &amp;lt;-&amp;gt;
frontent&lt;/cite&gt; interface. I am implementing a &lt;cite&gt;deleteObject()&lt;/cite&gt; function that deletes
the object from the BCF file and from the data structure. But since it is
currently under development I didn't already push it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;June 19th:&lt;/strong&gt; Today most work got into thinking about how to do the interface
between the data model and the GUI or the python interface for nonGUI mode
respectively.
Apart from thinking however I also pushed a major &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/8ceb3e8b18c39a2c25b5d638e5337260105be45d"&gt;commit 8ceb3e8&lt;/a&gt;. It adds
&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/8ceb3e8b18c39a2c25b5d638e5337260105be45d/src/bcf/writer.py#L686"&gt;writer.modifyElement()&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/8ceb3e8b18c39a2c25b5d638e5337260105be45d/src/bcf/writer.py#L842"&gt;writer.processProjectUpdates()&lt;/a&gt; as well as helper
functions. &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/8ceb3e8b18c39a2c25b5d638e5337260105be45d/src/bcf/writer.py#L686"&gt;writer.modifyElement()&lt;/a&gt;, apart from &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/647b6845ae819e1175de2539e27ec42a08c45f1a/src/bcf/writer.py#L380"&gt;writer.addElement()&lt;/a&gt; and
&lt;cite&gt;writer.deleteElement()&lt;/cite&gt;, also takes the old value of the modified element as
parameter. This is necessary to find the correct element (attribute or simple
element) in the xml file.
&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/8ceb3e8b18c39a2c25b5d638e5337260105be45d/src/bcf/writer.py#L842"&gt;writer.processProjectUpdates()&lt;/a&gt; has the purpose of iterating over a list of
updates to the &lt;cite&gt;project&lt;/cite&gt; object and calling the respective handler function
(&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/8ceb3e8b18c39a2c25b5d638e5337260105be45d/src/bcf/writer.py#L748"&gt;writer.handleAddElement()&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/8ceb3e8b18c39a2c25b5d638e5337260105be45d/src/bcf/writer.py#L776"&gt;writer.handleDeleteElement()&lt;/a&gt; and
&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/8ceb3e8b18c39a2c25b5d638e5337260105be45d/src/bcf/writer.py#L801"&gt;writer.handleModifyElement()&lt;/a&gt;). If some error occured during the update the
errorenous update is returned, in case of success it returns &lt;cite&gt;None&lt;/cite&gt;.
Also in this commit I added a list &lt;cite&gt;writer.projectSnapshots&lt;/cite&gt; which holds an
arbitrary number of the latest n updates. This is supposed to fuel the undo
operation, and will be used in the future.
As always for a bit more of information please see the respective &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/8ceb3e8b18c39a2c25b5d638e5337260105be45d"&gt;commit
8ceb3e8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;June 18th:&lt;/strong&gt; &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/3765658dfd50f77a85252bb3904c554eb61b5086/src/bcf/writer.py#L587"&gt;writer.deleteElement()&lt;/a&gt; is finished! (except for proper
documentation) Finishing commit is &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/3765658dfd50f77a85252bb3904c554eb61b5086"&gt;commit 3765658&lt;/a&gt;. &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/3765658dfd50f77a85252bb3904c554eb61b5086/src/bcf/writer.py#L587"&gt;writer.deleteElement()&lt;/a&gt;
now distinguishes between an identifiable element (one whose object is an
instance of &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/master/src/interfaces/identifiable.py"&gt;interfaces.Identifiable&lt;/a&gt;), a non identifiable element and an
attribute. All have to be handled in a different manner to one another or can be
handled in an easier way than another element type.
Other changes that were implemented while writing on &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/3765658dfd50f77a85252bb3904c554eb61b5086/src/bcf/writer.py#L587"&gt;writer.deleteElement()&lt;/a&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the interface &lt;cite&gt;interfaces.Identifiable&lt;/cite&gt; now only holds IDs of type UUID, for
more info please see &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/a18599a99a55745edaaa6551d5e7088c996b5a77"&gt;commit a18599a&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;project now implements a debug function &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/addc02e58351adb55e584912d5060f3ae2a299dc/src/bcf/project.py#L13"&gt;project.debug()&lt;/a&gt; as it was morphed to
the main place to handle debug prints. It also uses the &lt;a class="reference external" href="https://docs.python.org/3/library/inspect.html"&gt;inspect&lt;/a&gt; module to
get the name of the calling function. For more information please refer to
&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/addc02e58351adb55e584912d5060f3ae2a299dc"&gt;commit addc02e&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;6 test cases were added for &lt;cite&gt;writer.deleteElement()&lt;/cite&gt;. You can find them in
&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/master/src/tests/writer_tests.py"&gt;writer_tests.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;modification.Modification&lt;/cite&gt; which formerly housed a member &lt;cite&gt;author&lt;/cite&gt; and
&lt;cite&gt;date&lt;/cite&gt; is now split up into &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/59adbab0bee1b72544c8c219106f4eff4d3e206e/src/bcf/modification.py#L13"&gt;modification.ModificationAuthor&lt;/a&gt; and
&lt;cite&gt;modification.ModificationDate&lt;/cite&gt;. This makes it easier to handle in the
&lt;cite&gt;writer&lt;/cite&gt;-module. For more information see &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/59adbab0bee1b72544c8c219106f4eff4d3e206e"&gt;commit 59adbab&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/master/src/bcf/util.py"&gt;util.py&lt;/a&gt; got two new functions: &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/3765658dfd50f77a85252bb3904c554eb61b5086/src/bcf/util.py#L152"&gt;util.updateSchemas()&lt;/a&gt; and
&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/3765658dfd50f77a85252bb3904c554eb61b5086/src/bcf/util.py#L173"&gt;util.copySchemas()&lt;/a&gt;. These were added in &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/3765658dfd50f77a85252bb3904c554eb61b5086"&gt;commit 3765658&lt;/a&gt; and are used to
manage local copies of the schema files.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;June 17th:&lt;/strong&gt; As expected I had to put everything today into the project on
university :/&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;June 16th:&lt;/strong&gt; Today I paused. Tomorrow I will have to invest time into the
project at university, so I don't know whether I come to do much work on FreeCAD
tomorrow either. June 18th I will be back working on &lt;cite&gt;writer.deleteElement()&lt;/cite&gt;
again!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;June 15th:&lt;/strong&gt; &lt;cite&gt;writer.deleteElement()&lt;/cite&gt; is not finished yet, work is still done
locally. On master &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/9f04faf2515be3b3b0f4d0c511864a7dd74a8bc7"&gt;commit 9f04faf&lt;/a&gt; comprises some notable changes to
&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/master/src/bcf/writer.py"&gt;./src/bcf/writer.py&lt;/a&gt;. Most notably is the renaming and enhancing of
&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/647b6845ae819e1175de2539e27ec42a08c45f1a/src/bcf/writer.py#L279"&gt;writer.getContainingETElementForAttribute()&lt;/a&gt; as well as the addition of new
testcases for this renamed function. But for more information please see the
commit message as it is quite elaborate.&lt;/p&gt;
&lt;p&gt;The current state of &lt;cite&gt;writer.deleteElement()&lt;/cite&gt; is that elements, whose types
inherit from &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/master/src/interfaces/identifiable.py"&gt;interfaces.Identifiable&lt;/a&gt;, can be deleted.&lt;/p&gt;
&lt;p&gt;Additionally to the first two points I thought about how to handle modifications
of the data model. Should there be a separate function &lt;cite&gt;writer.modifyElement()&lt;/cite&gt;
or could it also be constructed out of &lt;cite&gt;writer.deleteElement()&lt;/cite&gt; and
&lt;cite&gt;writer.addElement()&lt;/cite&gt;? Answer is: it could be constructed. But with the
implications that either:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;every change is written instantaneously to disk and the data model stays
coherent with the bcf file. The disadvantag is that batchable updates are not
possible and it may use quite a lot of CPU time.&lt;/li&gt;
&lt;li&gt;Or for every modification a snapshot of the data model is stored, with the
modified object in a list. This list is then processed chronological. This
preserves the possibility of issuing batched updates, but might use a
significant amount of memory.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;June 14th:&lt;/strong&gt; Today I finally finished the unit tests for
&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/647b6845ae819e1175de2539e27ec42a08c45f1a/src/bcf/writer.py#L380"&gt;writer.addElement()&lt;/a&gt;, for information on what it does please refer to the
function documentation as it is quite extensive and the function can handle
pretty much. The unit tests are to be found in &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/master/src/tests/writer_tests.py"&gt;writer_tests.py&lt;/a&gt;, and they were
finished in &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/c0e43177fccd637b046f8e0645f3d856fce6b053"&gt;commit c0e4317&lt;/a&gt;. Additionally to the unit tests this commit also
comprises refactorization of &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/647b6845ae819e1175de2539e27ec42a08c45f1a/src/bcf/writer.py#L279"&gt;writer.getContainingETElementForAttribute()&lt;/a&gt;,
a bugfix in &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/647b6845ae819e1175de2539e27ec42a08c45f1a/src/bcf/writer.py#L230"&gt;writer.getInsertionIndex()&lt;/a&gt;, a change in &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/647b6845ae819e1175de2539e27ec42a08c45f1a/src/bcf/project.py#L68"&gt;project.SimpleList&lt;/a&gt; and
the addition of &lt;cite&gt;getEtElement()&lt;/cite&gt; in &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/647b6845ae819e1175de2539e27ec42a08c45f1a/src/bcf/project.py#L29"&gt;project.SimpleElement&lt;/a&gt;. But for more
information please refer to the &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/c0e43177fccd637b046f8e0645f3d856fce6b053"&gt;commit c0e4317&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then the second big commit is &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/647b6845ae819e1175de2539e27ec42a08c45f1a"&gt;commit 647b684&lt;/a&gt;. In it I refactored the
assignment of the &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/647b6845ae819e1175de2539e27ec42a08c45f1a/src/interfaces/hierarchy.py#L9"&gt;Hierarchy.containingObject&lt;/a&gt; member variable of classes
implementing &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/master/src/interfaces/hierarchy.py"&gt;Hierarchy&lt;/a&gt;. I moved it from the reader module to the individual
constructors which makes more sense, I think.&lt;/p&gt;
&lt;p&gt;Currently I am starting my work on &lt;cite&gt;writer.deleteElement()&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;June 13th:&lt;/strong&gt; All work today was done on &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commits/unit_tests"&gt;branch unit_tests&lt;/a&gt;. Today one
commit, &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/24558c2a56c078d18b8f63b256ca5cc8ada7456e"&gt;commit 24558c2&lt;/a&gt;, was added. In short: this commit adds two new test
cases and rewrites &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/647b6845ae819e1175de2539e27ec42a08c45f1a/src/bcf/writer.py#L230"&gt;writer.getInsertionIndex()&lt;/a&gt;. The result of this function is
now the greatest index possible at which an element could be inserted. Now you
will also find yesterdays work in the commits:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/2593bdb5a889e8ec4c531bd0e675c9ce65648eb5"&gt;commit 2593bdb&lt;/a&gt;: &lt;cite&gt;writer.py: viewpoints can now be added&lt;/cite&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/4de50788af938d69f00fac01848ee7771d805ae1"&gt;commit 4de5078&lt;/a&gt;: &lt;cite&gt;writer.py: compileChanges() function added&lt;/cite&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/72a63ff187a551f8fb75cc0d879112222b193a10"&gt;commit 72a63ff&lt;/a&gt;: &lt;cite&gt;ADD writer_tests.py: unit tests for writer.py&lt;/cite&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;June 12th:&lt;/strong&gt; Viewpoint objects can now be added, resulting in the generation
of a new viewpoint file in the corresponding topic directory, for more
information please refere to &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/2593bdb5a889e8ec4c531bd0e675c9ce65648eb5"&gt;commit 2593bdb&lt;/a&gt;. &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/4de50788af938d69f00fac01848ee7771d805ae1"&gt;commit 4de5078&lt;/a&gt; adds the
function &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/4de50788af938d69f00fac01848ee7771d805ae1/src/bcf/writer.py#L400"&gt;writer.compileChanges()&lt;/a&gt;. It is not that long or complicated, but the
most stuff goes on under the hood of the function call in line
&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/4de50788af938d69f00fac01848ee7771d805ae1/src/bcf/writer.py#L415"&gt;writer.compileChanges()#415&lt;/a&gt;. It results in a depth first search objects that
don't are in the original state. Hence every data model class had to be edited.
Currently I am working locally on unit tests for the &lt;cite&gt;writer.addElement()&lt;/cite&gt;
method for which I have 11 testcases planned. I will probably push them tomorrow
upstream.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;June 11th:&lt;/strong&gt; with &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/645a0f073c102ca82315e026b6a4c66f8b68faea"&gt;commit 645a0f0&lt;/a&gt; I added support for all attributes that are
optional, to be added (at least the ones defined in &lt;cite&gt;markup.xsd&lt;/cite&gt;). Currently I
am not supporting the addition of whole new projects, and viewpoints are not
mutable, so once after they are saved they stay. Then locally I am currently
implementing the addition of a whole viewpoint file. Probably tomorrow it will
be merged into master and pushed upstream.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;June 10th:&lt;/strong&gt; &lt;cite&gt;writer.addElement()&lt;/cite&gt; function is again further finished. It now
has the capability of adding attributes to &lt;cite&gt;File&lt;/cite&gt; elements in the header. For
more information see &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/da46aa438402fd7fe8be17d4ead232bc54ab6afe"&gt;commit da46aa4&lt;/a&gt;, also &lt;cite&gt;markup.HeaderFile&lt;/cite&gt; was added, for
more information please refere to the commit message. &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/78ac6ce0eac8f3e9dedf6d2ab89f5f0d40430842"&gt;commit 78ac6ce&lt;/a&gt;
introduces &lt;cite&gt;project.SimpleElement&lt;/cite&gt;, &lt;cite&gt;project.SimpleList&lt;/cite&gt; and
&lt;cite&gt;project.Attribute&lt;/cite&gt;. They are used to represent the values of simple
elements, lists of simple elements or attribues respectively. But they also
inherit &lt;cite&gt;XMLName&lt;/cite&gt;, &lt;cite&gt;Hierarchy&lt;/cite&gt; and &lt;cite&gt;State&lt;/cite&gt; so they can be treated like any other
representation of an element.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;June 9th:&lt;/strong&gt; In &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/2afab2ddd410761e864f73888085836b717c1820"&gt;commit 2afab2d&lt;/a&gt; I implemented half of &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/master/src/interfaces/xmlname.py"&gt;XMLName&lt;/a&gt; interface
for all classes. This interface defines a property &lt;cite&gt;xmlName&lt;/cite&gt; that each class
inherits. By default this property is set to the name of the class, but the
constructor of &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/master/src/interfaces/xmlname.py"&gt;XMLName&lt;/a&gt; also offers the possibility to define a custom name
(this is needed for the writer module). Second to the &lt;cite&gt;xmlName&lt;/cite&gt; property it
defines a member function &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/3eeb7f8356ad664ad9ac40a31a7a1c58dfb74a16/src/interfaces/xmlname.py#L16"&gt;XMLName.getEtElement(element)&lt;/a&gt; that shall receive an
&lt;cite&gt;xml.etree.ElementTree.Element&lt;/cite&gt; object and shall extend it with its properties,
and return it again. It is expected that the returned element is schema conform
and can be inserted as it is.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/e0130434581c59e5ce490a078e1b262ddfd3c449"&gt;commit e013043&lt;/a&gt; finally removed &lt;cite&gt;SchemaConstraint&lt;/cite&gt; and its decendants, since
it was actually unnecessary.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/3eeb7f8356ad664ad9ac40a31a7a1c58dfb74a16"&gt;commit 3eeb7f8&lt;/a&gt; added to the writer the functionality of adding objects of
type comment into the corresponding &lt;cite&gt;markup.bcf&lt;/cite&gt; file.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;June 8th:&lt;/strong&gt; I have worked on the &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/647b6845ae819e1175de2539e27ec42a08c45f1a/src/bcf/writer.py#L380"&gt;writer.addElement()&lt;/a&gt; method. All work is
still local and not finished. The overall strategy for the writer module is to
read in the corresponding XML file using &lt;a class="reference external" href="https://docs.python.org/3.3/library/xml.etree.elementtree.html"&gt;xml.etree.ElementTree&lt;/a&gt;, add the new
elements in this structure and write it to the file again.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;June 7th:&lt;/strong&gt; Other than beginning a new blog post about the writer module and
how I envision it, I didn't come to much today.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;June 6th:&lt;/strong&gt; Most work today was organisatorial: had correspondence with
&lt;a class="reference external" href="https://github.com/teocomi"&gt;Matteo Cominetti&lt;/a&gt; as well as with Paul Deckers (a Product Specialist at the
BIMcollab Support Team) about the topic of handling non conform schema files.
This topic bugs me! For the writer module I am starting to write, I started a
list that contains the elements that shall be updateable/addable and deleteable,
will be available in a future commit.
On to the development: &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/d6c6cc5f69a1b179eebae8701e86e178146a02bb"&gt;commit d6c6cc5&lt;/a&gt; I added an own class for the labels of
a topic. This class (&lt;cite&gt;Labels&lt;/cite&gt;) inherits from list and also inherits the
&lt;cite&gt;Hierarchy&lt;/cite&gt; interface, that I introduced yesterday. The initialisation of a
&lt;cite&gt;Topic&lt;/cite&gt; object is unchanged, in the init function the list of string labels is passed
to the constructor of &lt;cite&gt;Labels&lt;/cite&gt;. The inheritance from &lt;cite&gt;Hierarchy&lt;/cite&gt; offers the
reader the possibility of easily generating the path that leads down to the
corresponding label element in the XML file.
&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/de38b48c9fcc200316741e85624b82275a99485b"&gt;commit de38b48&lt;/a&gt; adds the parameter &lt;cite&gt;guid&lt;/cite&gt; to the constructor of &lt;cite&gt;Comment&lt;/cite&gt;.
Till today I overlooked it, which lead me to a pseudo problem. Without the Guid
of a comment I would have had the problem of uniquely identifying the comment
that shall be updated or deleted by the writer module. Additionally the &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/de38b48c9fcc200316741e85624b82275a99485b"&gt;commit
de38b48&lt;/a&gt; finishes the &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/de38b48c9fcc200316741e85624b82275a99485b/src/bcf/writer.py#L61"&gt;writer.getUniqueIdOfListElementInHierarchy()&lt;/a&gt; function
that generates the hierarchy of a given element and checks if it contains an
element that only occurs in a list, if that is the case then the unique id of
that list element is returned.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;June 5th:&lt;/strong&gt; Today I finally followed the suggestion of @yorik and replaced my
own code for getting the path to the temporary folder with the python module
&lt;cite&gt;tempfiles&lt;/cite&gt;, for more information see &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/5616fd92e0a6e1d83cd99cae0ff85f7689ae0b99"&gt;commit 5616fd9&lt;/a&gt;. &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/ac589c8fff50d9aa2ad63a70b92479277cd6cd38"&gt;commit ac589c8&lt;/a&gt; is a
small one, but with some repercussions. In it I added &lt;cite&gt;_viewpoint&lt;/cite&gt; to the
initialization sequence of the &lt;cite&gt;markup.__init__()&lt;/cite&gt; function. Without it I
wouldn't have been able to use the property &lt;cite&gt;markup.viewpoint&lt;/cite&gt;. The amount the
previous commit was smaller than usual &lt;cite&gt;commit c9f9ea4&lt;/cite&gt; is larger. In it I
realized some conceptual stuff, like already implementing three interfaces in
many classes, that will make the writer module easier to write and more
maintainable. For this I added the &lt;cite&gt;./src/interfaces&lt;/cite&gt; folder. It is its own
python package, and defines three modules/interfaces (atm):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;State: represents the state of an object during the plugin lifetime&lt;/li&gt;
&lt;li&gt;Hierarchy: allows an object to know the object it is part of and thereby
somewhat implementing a doubly linked tree. For example consider an object
of &lt;cite&gt;Markup&lt;/cite&gt;. It probably has one or more objects of type &lt;cite&gt;Comment&lt;/cite&gt;. Now each
comment has a member &lt;cite&gt;containingObject&lt;/cite&gt;, which in this case references the
one object of type &lt;cite&gt;Markup&lt;/cite&gt; that references it.&lt;/li&gt;
&lt;li&gt;Identifiable: allows an object to define a unique Id, if it shall be
uniquely identifiable. This is intended to be used mainly for objects that
can occur multiple times. Like for example &lt;cite&gt;Viewpoint&lt;/cite&gt;. Here the Id is the
id defined in the XML file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But please refer to the commit itself for more information, as it has a rather
extensive commit message, describing the interfaces in more detail.&lt;/p&gt;
&lt;p&gt;Please note: tomorrow I won't be able to do much. I try to throw in between one
and three hours.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;June 4th:&lt;/strong&gt; In &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/0557bcc4eddf1175393fc26cd0526e8d0d3d55b9"&gt;commit 0557bcc&lt;/a&gt; I fixed the issue where the &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/9ecb6b1009521a147cc87bf3a37bceb905ca7f22/src/bcf/markup.py#L106"&gt;Comment&lt;/a&gt; s didn't
have a valid &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/9ecb6b1009521a147cc87bf3a37bceb905ca7f22/src/bcf/markup.py#L43"&gt;ViewpointReference&lt;/a&gt; object after creation. The member
&lt;cite&gt;Comment.viewpoint&lt;/cite&gt; should, after creation, hold a reference to a valid
&lt;cite&gt;ViewpointReference&lt;/cite&gt; object that was created in &lt;cite&gt;reader.buildMarkup()&lt;/cite&gt;. Actually it was not
implemented till today, I just left a TODO note for me.
In &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/354d2c46cfcf0fc3ee0c97832447b4bc370a9cbf"&gt;commit 354d2c4&lt;/a&gt; I added new testcases, all for testing the results of
&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/9ecb6b1009521a147cc87bf3a37bceb905ca7f22/src/bcf/reader.py#L528"&gt;reader.buildViewpoint()&lt;/a&gt;. &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/0733b591b3a0871c68bd4e13c72bf80d4ccc986e"&gt;commit 0733b59&lt;/a&gt; includes fixes of bugs I became
aware of during testing &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/9ecb6b1009521a147cc87bf3a37bceb905ca7f22/src/bcf/reader.py#L528"&gt;reader.buildViewpoint()&lt;/a&gt;, as well as the
implementation of &lt;cite&gt;__str__()&lt;/cite&gt; for some more classes, which helped during
debugging. Then &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/d6cb41c06bf1eb77f4fdd42782e4a61fd4a1a1fd"&gt;commit d6cb41c&lt;/a&gt; also contains bug fixes and debug prints were
remove, but see more in the commit message. And finally I added the file
&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/master/src/bcf/writer.py"&gt;./src/bcf/writer.py&lt;/a&gt; with some dictionaries that I will need for the writer
module.&lt;/p&gt;
&lt;p&gt;Last but not least one thing I learned today using git: don't rebase onto
master. Rebase master onto some branches but not the other way around. This
makes things messy.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;June 3rd:&lt;/strong&gt; A new blog post is ready, this one elaborates a bit on the ideas I
have in regards to handling &lt;a class="reference external" href="https://podestplatz.github.io/FreeCAD-blog/posts/handling-non-conform-bcf-files/"&gt;non schema conform BCF files&lt;/a&gt;. The &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commits/unit_tests"&gt;branch unit_tests&lt;/a&gt;
got a few new commits, mainly adding test cases for the &lt;cite&gt;reader.buildTopic()&lt;/cite&gt;
and &lt;cite&gt;reader.buildComment()&lt;/cite&gt; functions, for more info see &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/c94d812af69e05cc0128b32038ab2e01927afeb0"&gt;commit c94d812&lt;/a&gt;.
&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/7a31462cb37e0cc94eebeda8a02af4641ab42ca6"&gt;commit 7a31462&lt;/a&gt; contains bug fixes for bugs that I became aware of due to the
newly created test cases. Offline I thought for an extended period of time about
how to structure an update in place approach to writing the bcf file, rather
than writing the whole file at once. For this a new blog post is coming this
week.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;June 2nd:&lt;/strong&gt; I have written on a blog post about how to handle non XSD conform
BCF files (which is not finished, yet). Otherwise I paused development.
Tomorrow it is gonna be picked up again!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;June 1st:&lt;/strong&gt; Today not much work was done, but here is a little summary. I
implemented the &lt;cite&gt;__eq__()&lt;/cite&gt; function in every class I defined, see &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/03057542226fde14de0bf312e032ec4e41d23a4b"&gt;commit
0305754&lt;/a&gt;. This shall help me in the future when I want to write unit tests.
In &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/master/src/bcf/reader.py"&gt;reader.py&lt;/a&gt; I inserted a rather long comment about how the &lt;cite&gt;buildX&lt;/cite&gt;
functions, like what they do, what they expect and what they return. Since all
behave the same I have written one big comment to document all of them, but see
&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/a05e22b45d3ff86871d5ac14e355cf25e4b45596"&gt;commit a05e22b&lt;/a&gt;. The branch &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commits/feature_read_viewpoint"&gt;feature_read_viewpoint&lt;/a&gt; got merged into master,
for testing I will create a own testing branch. And I created a package out of
the &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/tree/master/src/bcf"&gt;src/bcf&lt;/a&gt; directory that just exports &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/master/src/bcf/reader.py"&gt;reader.py&lt;/a&gt; and &lt;cite&gt;writer.py&lt;/cite&gt; (latter
one I still have to write), for details see &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/015c2f6fc162b6dbe15a9c3bc8957679935dd1a6"&gt;commit 015c2f6&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;May 31st:&lt;/strong&gt; Today all work was done on the &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commits/feature_read_viewpoint"&gt;feature_read_viewpoint&lt;/a&gt;-branch.
Most important the function &lt;cite&gt;reader.buildViewpoint()&lt;/cite&gt; is finished and with it
the last step was completed to being able to read in a complete BCF file, given
it is validated successful against the XML schemas. For more info see &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/2922d71af78845bfbdb05ac571c232cfcfdd5989"&gt;commit
2922d71&lt;/a&gt;. To test the reader "module" I created two new topics in
&lt;cite&gt;src/bcf/test_data&lt;/cite&gt;. One is complete in the way that it defines at least one
element for every node in all files specified by the corresponding XSD file. The
third topic just has a complete header element in &lt;cite&gt;markup.bcf&lt;/cite&gt;. For more info
see &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/7fa127aec6847d9bd653fe43f345b7ee4eaa992b"&gt;commit 7fa127a&lt;/a&gt;. Now ViewpointReference has a reference to the
corresponding Viewpoint object. The inheritance approach thrown away because
after reading in all ViewpointReferences from &lt;cite&gt;markup.bcf&lt;/cite&gt; the Viewpoint objects
would have been created, but with no relation to their super class. This meant
that an object of the former could not have been used as an object of the latter
without recreation of this object. That further would have complicated the code,
and made it hard to understand and maintain. Therefore composition was chosen in
favor of inheritance. For more info also see &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/2922d71af78845bfbdb05ac571c232cfcfdd5989"&gt;commit 2922d71&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;May 30th:&lt;/strong&gt; Added the folder &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/tree/master/src/bcf/test_data"&gt;src/bcf/test_data&lt;/a&gt; that is intended to contain
test data for testing during development, but not primarily for unit tests now.
Currently it contains an example compliant with the schema files. For more info
see &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/6fb72f5bbefddc0a063f67c4d6fa806b68763ee2"&gt;commit 6fb72f5&lt;/a&gt;. In &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/30b998d12ce4c647abc26a6e42a9a5f0efd872fd"&gt;commit 30b998d&lt;/a&gt; I changed the type of every variable
associated with &lt;cite&gt;SchemaConstraints&lt;/cite&gt; to an elementary type. Reason being that the
&lt;cite&gt;extensions.xsd&lt;/cite&gt; file (as my understanding goes) is intended to be specified
in the xml file itself as ... well, an extension to the existing schema.
Finished function &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/3f5fdafb09422e0be0fb10f59f1df76619b2a3ea/src/bcf/reader.py#L350"&gt;reader.buildMarkup()&lt;/a&gt;, although still a "#TODO" comment is
above the function header. Also in &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/aa045980b5f2391b7d93dbf2caa163c6f7f8acac"&gt;commit aa04598&lt;/a&gt; the class
&lt;cite&gt;DocumentReference&lt;/cite&gt; and &lt;cite&gt;BimSnippet&lt;/cite&gt; was added. Last but not least: started
working on reading in &lt;cite&gt;viewpoint.bcfv&lt;/cite&gt;. But not finished, that is why this
development is still on the branch &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commits/feature_read_viewpoint"&gt;feature_read_viewpoint&lt;/a&gt;. For more info
refer to &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/154630d4238172610a221dc6ae3c1023c037c553"&gt;commit 154630d&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;May 29th:&lt;/strong&gt; Already started refactoring a bit in &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/master/src/bcf/reader.py"&gt;reader.py&lt;/a&gt;. Went away from
using &lt;cite&gt;ZipFile&lt;/cite&gt; objects when operating on the zipFile to the extracted version
of the zip file instead. Written function &lt;cite&gt;reader.readInFile()&lt;/cite&gt; that shall read
the complete BCF file into the data structure (see &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/9a791627b16b09e9c6641975e6fb0a9bf7e72856"&gt;commit 9a79162&lt;/a&gt;). During testing
I noticed that the example BCF file from the &lt;a class="reference external" href="https://www.bimcollab.com/en/Support/Support/Downloads/Examples-templates"&gt;bimcollab website&lt;/a&gt; is not valid
becaus it defines an empty node &lt;cite&gt;Header&lt;/cite&gt; in &lt;cite&gt;markup.bcf&lt;/cite&gt; of topic
&lt;cite&gt;ebb1a8bf-6d1d-4aad-a875-61ad3cc40d30&lt;/cite&gt; which is prohibited by &lt;cite&gt;markup.xsd&lt;/cite&gt; of
BCF version 2.1.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;May 28th:&lt;/strong&gt; Created a new blog post about the way the schema constraints are
handled now (&lt;a class="reference external" href="https://podestplatz.github.io/FreeCAD-blog/posts/schema-constraints-revisited/"&gt;schema constraints revisited&lt;/a&gt;). Change configuration file of the
blog to reflect the current project, instead of the FreeCAD development blog.
Started a unit-test suite, see &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/tree/unit_tests/src/tests"&gt;branch unit_tests ./src/tests&lt;/a&gt;, and test cases
written for &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/blob/991d967ab5fc00f8960bbc938c727d11e42c950c/src/bcf/reader.py#L145"&gt;reader.buildProject()&lt;/a&gt;. Written function in &lt;cite&gt;reader.py&lt;/cite&gt; that
parses &lt;cite&gt;bcf.version&lt;/cite&gt; and returns the version number as string, see &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/cccde6ae2bdf52f21f5e7ecfeb68cc89957af29e"&gt;commit
cccde6a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;May 27th:&lt;/strong&gt; Complete the python representation of the class diagram &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/0a1081bb1fe26dc729d3a2b708fde491b3a31505"&gt;commit
0a1081b&lt;/a&gt;. Also advanced to the point where a &lt;cite&gt;.bcf&lt;/cite&gt; can be opened, every XML
file be validated (in theory, only tested it with project.bcfp yet) and the
contents of &lt;cite&gt;project.bcfp&lt;/cite&gt; are can be written to an object of &lt;cite&gt;Project&lt;/cite&gt;. For
more details refer to following commits:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/bae270f1127039ae78876bf6f3785c48ec0e30b9"&gt;commit bae270f&lt;/a&gt;: Add util.py and reader.py&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/3c0b9d0a1beed02816cd15b0a5186368d7361f7d"&gt;commit 3c0b9d0&lt;/a&gt;: util.py: add schemaValidate&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/f62ed23a73e209fc69995fccedf4e20beddf7632"&gt;commit f62ed23&lt;/a&gt;: reader.py: add buildProject&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;May 26th:&lt;/strong&gt; Update Comment in class diagram. For more info see &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/1c34ad907b7fc56cd96aa2fc5aa133e3f445a24b"&gt;commit 1c34ad9&lt;/a&gt;, and create &lt;a class="reference external" href="https://forum.freecadweb.org/viewtopic.php?p=310515#p310515"&gt;mockup of the plugin interface&lt;/a&gt;.
Write part one of the class model in python see &lt;a class="reference external" href="https://github.com/podestplatz/BCF-Plugin-FreeCAD/commit/31ef931b3637c90ca0c8252f71dd635e66a843fa"&gt;commit 31ef931&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>daily</category><guid>https://podestplatz.github.io/FreeCAD-blog/posts/dev-logs/</guid><pubDate>Sat, 22 Jun 2019 08:00:00 GMT</pubDate></item></channel></rss>